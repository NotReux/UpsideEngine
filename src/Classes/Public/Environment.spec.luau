local Environment = require(script.Parent.Environment)

return function()
	Environment = Environment:new()

	describe(":Get()", function()
		it("should get an element", function()
			Environment:AddOne(0, "B")
			expect(Environment:Get("B")).to.equal(0)
		end)
	end)
	describe(":AddOne()", function()
		it("should add an element", function()
			Environment:AddOne(0, "A")
			expect(Environment:Get("A")).to.equal(0)
		end)
	end)
	describe(":HasOne()", function()
		it("should check an element", function()
			Environment:RemoveOne("B")
			expect(Environment:HasOne("A")).to.equal(true)
			expect(Environment:HasOne("B")).never.to.equal(true)
		end)
	end)
	describe(":RemoveOne()", function()
		it("should remove an element", function()
			Environment:RemoveOne("A")
			expect(Environment:Get("A")).never.to.be.ok()
		end)
	end)
	describe(":Add()", function()
		it("should add one or more elements", function()
			Environment:Add({ A = 1, B = 2, C = 3 })
			expect(Environment:Get("A")).to.equal(1)
			expect(Environment:Get("B")).to.equal(2)
			expect(Environment:Get("C")).to.equal(3)
		end)
	end)
	describe(":Has()", function()
		it("should check one or more elements", function()
			local hasAll = Environment:Has({ "A", "B", "C" })
			expect(hasAll).to.equal(true)
		end)
	end)
	describe(":Update()", function()
		it("should update one or more elements", function()
			Environment:Update({ A = 3, B = 2, C = 1 })
			expect(Environment:Get("A")).to.equal(3)
			expect(Environment:Get("C")).to.equal(1)
		end)
	end)
	describe(":Remove()", function()
		it("should remove one or more elements", function()
			Environment:Remove({ "A", "B", "C" })
			expect(Environment:Get("A")).never.to.be.ok()
			expect(Environment:Get("C")).never.to.be.ok()
		end)
	end)

	local function test(n)
		if not n then
			error("something is not working")
		end
	end

	describe(":SetProperty()", function()
		it("should set a property in every element", function()
			Environment:AddOne({ N = 0 }, "A")
			Environment:SetProperty("N", 1)

			expect(Environment:Get("A").N).to.equal(1)
		end)
	end)
	describe(":Run()", function()
		it("should execute a function in every element", function()
			Environment:AddOne("A", { Test = test })
			expect(function()
				Environment:Run("Test", 1)
			end).never.to.throw()
		end)
	end)
end
