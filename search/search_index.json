{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p> Upside Engine </p>  Upside Engine is the ultimate 2d framework to make your own 2d games!  <p>Get Started Documentation</p> <p> </p> Upside Engine helps you creating immersive 2D lighting effects. With Upside Engine, you can easily create lighting environments for your roblox videogames. <p> </p> Upside Engine lets you create immersive 2D particles for your games. Whether you need fire, smoke, sparks, or magic effects, Upside Engine has you covered. <p> </p> Upside Engine, gives you the freedom and flexibility to make your 2D games as fun and immersive, add physics to your character and bring it to life."},{"location":"games.html","title":"Games","text":""},{"location":"games.html#games","title":"Games","text":"<p>Here you can explore a list of  games created with the <code>Upside Engine Framework</code>, if you would like to add your game here send us a request in our discord . Before send us a request about your game make sure your game is public, otherwise it will be rejected.</p>"},{"location":"documentation/BaseClass.html","title":"BaseClass","text":"<p>All objects are based on this class</p> <p></p>"},{"location":"documentation/BaseClass.html#properties","title":"Properties","text":""},{"location":"documentation/BaseClass.html#readonly-string-classname","title":"readonly string ClassName","text":"<p>The name of the class</p>"},{"location":"documentation/BaseClass.html#readonly-string-name","title":"readonly string Name","text":"<p>The name of the object</p>"},{"location":"documentation/BaseClass.html#string-id","title":"string Id","text":"<p>A unique identifier for each object</p>"},{"location":"documentation/BaseClass.html#methods","title":"Methods","text":""},{"location":"documentation/BaseClass.html#baseclass-new","title":"BaseClass <code>new()</code>","text":"<p>Creates a new object</p> Example <pre><code>BaseClass:new()\n</code></pre>"},{"location":"documentation/BaseClass.html#baseclass-extendclassname-string-classstructure-dictionary","title":"BaseClass? <code>Extend(ClassName: string, ClassStructure: dictionary)</code>","text":"<p>Creates a new class</p> Example <pre><code>local methods = {}\nlocal constructor = {}\n\nfunction constructor:Puppy(breed: string)\n    addReadonly({ breed = breed }) --[[ \n        This method is useful to add read-only properties \n        that cannot be added when a class is extended \n    ]]\nend\n\nfunction methods:Bark()\n    print(\"Woof!!\")\nend\n\nClass:Extend(\"Puppy\", {\n    constructors = constructor,\n    methods = methods,\n\n    private = { -- Only can be read or changed by the class methods\n        Tired = true\n    },\n\n    readonly = { -- Can't be changed without access to restricted data\n        Happy = true\n    },\n\n    rules = { -- Can be changed using the same type\n        Lazy = true,\n        Location = Vector2.zero,\n    }\n})\n</code></pre>"},{"location":"documentation/BaseClass.html#boolean-isaclassname-string","title":"boolean <code>IsA(className: string)</code>","text":"<p>IsA returns true if the Instance's class is equivalent to or a subclass of a given class name</p>"},{"location":"documentation/BaseClass.html#void-setnamename-string","title":"void <code>SetName(name: string)</code>","text":"<p>Sets the object name</p>"},{"location":"documentation/BaseClass.html#void-destroy","title":"void <code>Destroy()</code>","text":"<p>Destroys the object</p>"},{"location":"documentation/BaseClass.html#events","title":"Events","text":""},{"location":"documentation/BaseClass.html#changed","title":"Changed","text":"Parameters DataType Property String"},{"location":"documentation/BaseClass.html#destroy","title":"Destroy","text":"Parameters DataType Property String"},{"location":"documentation/UpsideEngine.html","title":"Upside Engine","text":"<p>On this page you will find information about the object that is returned when you access the engine. In this object you have access to all classes and services of the engine</p> <p>Info</p> <p>This object was extended from EventEmitter</p> <p></p>"},{"location":"documentation/UpsideEngine.html#properties","title":"Properties","text":""},{"location":"documentation/UpsideEngine.html#string-version","title":"string Version","text":"<p>The current installed upside engine version</p>"},{"location":"documentation/UpsideEngine.html#methods","title":"Methods","text":""},{"location":"documentation/UpsideEngine.html#void-createclassname-string-any","title":"void <code>Create(ClassName: string, ...any)</code>","text":"<p>This method creates any of these classes:</p> <p><code>Scene, Environment, Character, Sprite, Particle, PhysicalObject, Sound, Light</code></p>"},{"location":"documentation/UpsideEngine.html#void-extendclassname-string-classdata-classdata","title":"void <code>Extend(ClassName: string, ClassData: ClassData)</code>","text":"<p>This method extends any of these classes:</p> <p><code>Scene, Environment, Character, Sprite, Particle, PhysicalObject, Sound, Light</code></p>"},{"location":"documentation/UpsideEngine.html#void-getserviceservicename-string","title":"void <code>GetService(ServiceName: string)</code>","text":"<p>This method returns any of these services:</p> <p><code>SceneManager, NetworkingService, CrossPlatformService, PluginSupportService</code></p>"},{"location":"documentation/UpsideEngine.html#void-optimizateoptions-dictionary","title":"void <code>Optimizate(Options: dictionary)</code>","text":"<p>Removes innecesary roblox scripts</p> Info <pre><code>UpsideEngine:Optimizate({\n    TimeOut = 1, -- The maximum yield time for waiting every roblox script\n    DeleteChat = true\n})\n</code></pre>"},{"location":"documentation/Welcome.html","title":"Welcome to the documentation!","text":"<p>Cite</p> <p>If a class was inherited from another class, the properties of the class from which it was inherited will not show its properties on the current page, you will have to go to its respective page to read more about its information. </p> <p>Here are a few pages that are essential to read if this is your first time using the upside engine framework:</p> <ul> <li>Upside Engine</li> <li>SceneManager</li> <li>CrossPlatformService</li> <li>Scene</li> <li>Sprite</li> </ul>"},{"location":"documentation/autogen/index.html","title":"BaseObject","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is the base class of the majority of classes</p>"},{"location":"documentation/autogen/index.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-instance-instance","title":"readonly Instance Instance","text":"<p>The object instance</p>"},{"location":"documentation/autogen/index.html#readonly-string-scene","title":"readonly string Scene","text":"<p>The object scene ID</p>"},{"location":"documentation/autogen/index.html#readonly-string-instancetype","title":"readonly string InstanceType","text":"<p>The class name of the object instance</p>"},{"location":"documentation/autogen/index.html#readonly-table-tags","title":"readonly table Tags","text":"<p>This table stores all the tags of the object</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/index.html#baseobject-constructorparent-scene","title":"BaseObject Constructor<code>(parent: Scene)</code>","text":""},{"location":"documentation/autogen/index.html#void-setproperties-dictionarystring-any","title":"void Set<code>(properties: Dictionary&lt;string, any&gt;)</code>","text":"<p>Sets the properties of the object instance</p>"},{"location":"documentation/autogen/index.html#void-addtagtag-string","title":"void AddTag<code>(tag: string)</code>","text":"<p>Adds a tag to the object</p>"},{"location":"documentation/autogen/index.html#boolean-hastagtag-string","title":"boolean HasTag<code>(tag: string)</code>","text":"<p>Checks if the object contain the specified tag</p>"},{"location":"documentation/autogen/index.html#void-removetagtag-string","title":"void RemoveTag<code>(tag: string)</code>","text":"<p>Removes a tag from the object</p>"},{"location":"documentation/autogen/index.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#camera","title":"Camera","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is included on every scene, it's used to move you around the scene</p>"},{"location":"documentation/autogen/index.html#properties_1","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-character-subject","title":"readonly Character Subject","text":"<p>This property defines the object which is going to follow the camera</p>"},{"location":"documentation/autogen/index.html#rules-boolean-followsubject","title":"rules boolean FollowSubject","text":"<p>This property defines if the camera is going to follow the defined subject</p>"},{"location":"documentation/autogen/index.html#methods_1","title":"Methods","text":""},{"location":"documentation/autogen/index.html#camera-constructorscene-scene","title":"Camera Constructor<code>(scene: Scene)</code>","text":""},{"location":"documentation/autogen/index.html#void-getposition","title":"void GetPosition<code>()</code>","text":"<p>Gets the camera position</p>"},{"location":"documentation/autogen/index.html#void-setpositionudim2-udim2","title":"void SetPosition<code>(udim2: UDim2)</code>","text":"<p>Sets the camera position</p>"},{"location":"documentation/autogen/index.html#void-setsubjectsubject-character","title":"void SetSubject<code>(subject: Character)</code>","text":"<p>Sets the camera subject</p>"},{"location":"documentation/autogen/index.html#void-looktoobject-physicalobject","title":"void LookTo<code>(object: PhysicalObject)</code>","text":""},{"location":"documentation/autogen/index.html#events_1","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#connection","title":"Connection","text":"<p>Info</p> <p>This object was Extended from BaseClass</p> <p>This class is used in the event emitter class, its used to manage a listener</p>"},{"location":"documentation/autogen/index.html#properties_2","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-boolean-active","title":"readonly boolean Active","text":"<p>Defines if the connection is active or not</p>"},{"location":"documentation/autogen/index.html#methods_2","title":"Methods","text":""},{"location":"documentation/autogen/index.html#connection-constructoreventid-number-event-dictionarystring-table","title":"Connection Constructor<code>(eventId: number, event: Dictionary&lt;string, table&gt;)</code>","text":""},{"location":"documentation/autogen/index.html#thread-waitseconds-number","title":"thread? Wait<code>(seconds: number?)</code>","text":"<p>Wait until the event gets fired, if seconds were specified, once the specified seconds have elapsed, it will stop waiting</p>"},{"location":"documentation/autogen/index.html#void-disconnect","title":"void Disconnect<code>()</code>","text":"<p>Deletes the connection and the listener</p>"},{"location":"documentation/autogen/index.html#events_2","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#eventemitter","title":"EventEmitter","text":"<p>Info</p> <p>This object was Extended from BaseClass</p> <p>The event emitter is used to manage the events of a class</p>"},{"location":"documentation/autogen/index.html#properties_3","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-table-eventsstorage","title":"readonly table EventsStorage","text":"<p>This table store all the events of the class</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#methods_3","title":"Methods","text":""},{"location":"documentation/autogen/index.html#connection-onname-string-callback-","title":"Connection On<code>(name: string, callback: () -&gt; ())</code>","text":""},{"location":"documentation/autogen/index.html#void-firename-string-any","title":"void Fire<code>(name: string, ...any)</code>","text":"<p>Triggers an event with the specified arguments</p>"},{"location":"documentation/autogen/index.html#events_3","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#lightingenvironment","title":"LightingEnvironment","text":"<p>Info</p> <p>This object was Extended from Environment</p> <p>This class is one of the most important components of a scene, is used to manage everything related with the light </p>"},{"location":"documentation/autogen/index.html#properties_4","title":"Properties","text":""},{"location":"documentation/autogen/index.html#rules-color3-ambientcolor","title":"rules Color3 AmbientColor","text":"<p>This is the color of every pixel of the ambient, we can say is the darkness color</p>"},{"location":"documentation/autogen/index.html#rules-number-ambienttransparency","title":"rules number AmbientTransparency","text":"<p>This is the transparency of the ambient, we can say is the darkness transparency</p>"},{"location":"documentation/autogen/index.html#rules-number-updatefrequency","title":"rules number UpdateFrequency","text":"<p>This is the seconds between every update of the pixels in the screen</p>"},{"location":"documentation/autogen/index.html#rules-number-pixelindex","title":"rules number PixelIndex","text":"<p>This is the pixel in the middle of every large pixel, used for internal purposes</p>"},{"location":"documentation/autogen/index.html#rules-number-distance","title":"rules number Distance","text":"<p>This is the distance between every large pixel, used for internal purposes</p>"},{"location":"documentation/autogen/index.html#readonly-string-instancetype_1","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/index.html#readonly-table-pixels","title":"readonly table Pixels","text":"<p>Stores all the ambient pixels</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#readonly-number-lightingintensity","title":"readonly number LightingIntensity","text":""},{"location":"documentation/autogen/index.html#methods_4","title":"Methods","text":""},{"location":"documentation/autogen/index.html#lightingenvironment-constructorparent-frame","title":"LightingEnvironment Constructor<code>(parent: Frame)</code>","text":""},{"location":"documentation/autogen/index.html#void-drawpixelssettings-any","title":"void DrawPixels<code>(settings: any)</code>","text":"<p>Draws the pixels for the scene with the specified settings     <pre><code>    settings = {\n        Pixels = 800, -- We can say that is the resolution for the ambient, is limited to 2000\n        Resolution = Vector2.new(1080, 1920) -- Defines the resolution to take as reference, is going to use the screen resolution if none is specified\n        AutoScale = true -- Defines if the amount of pixels is going to be scaled depending on the resolution\n    }\n</code></pre></p>"},{"location":"documentation/autogen/index.html#void-setlightingintensityvalue-number","title":"void SetLightingIntensity<code>(value: number)</code>","text":"<p>Sets the base intensity for all the lights in the scene</p>"},{"location":"documentation/autogen/index.html#void-getlightingintensity","title":"void GetLightingIntensity<code>()</code>","text":"<p>Gets the base intensity for all the lights in the scene </p>"},{"location":"documentation/autogen/index.html#void-updatescreen","title":"void UpdateScreen<code>()</code>","text":"<p>Updates the position, the transparency and the color of the ambient</p>"},{"location":"documentation/autogen/index.html#events_4","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#particleenvironment","title":"ParticleEnvironment","text":"<p>Info</p> <p>This object was Extended from Environment</p>"},{"location":"documentation/autogen/index.html#properties_5","title":"Properties","text":""},{"location":"documentation/autogen/index.html#methods_5","title":"Methods","text":""},{"location":"documentation/autogen/index.html#events_5","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#request","title":"Request","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is used for the client replication</p>"},{"location":"documentation/autogen/index.html#properties_6","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-table-content","title":"readonly table Content","text":"<p>The content of the request</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#readonly-number-clientid","title":"readonly number ClientId","text":"<p>The UserId of the client which sent the request if exists </p>"},{"location":"documentation/autogen/index.html#methods_6","title":"Methods","text":""},{"location":"documentation/autogen/index.html#request-constructorclientid-number-content-dictionarystring-any","title":"Request Constructor<code>(clientId: number, content: Dictionary&lt;string, any&gt;)</code>","text":""},{"location":"documentation/autogen/index.html#void-sendcontent-dictionarystring-any","title":"void Send<code>(content: Dictionary&lt;string, any&gt;)</code>","text":"<p>Sends the request to the server</p>"},{"location":"documentation/autogen/index.html#void-approveclients-table","title":"void Approve<code>(clients: table)</code>","text":"<p>The request is approved and its replicated to the specified clients, if none is specified it will be replicated to all the clients except to the client who sent the request</p>"},{"location":"documentation/autogen/index.html#baseobject-acceptany","title":"BaseObject Accept<code>(...any)</code>","text":"<p>Accepts the request and builds the object to be replicated</p>"},{"location":"documentation/autogen/index.html#void-getclient","title":"void GetClient<code>()</code>","text":"<p>Returns the player which sent the request</p>"},{"location":"documentation/autogen/index.html#events_6","title":"Events","text":"Name Description Build Params -&gt; BaseObjectFired when a request is accepted and the object to be replicated is being built"},{"location":"documentation/autogen/index.html#soundenvironment","title":"SoundEnvironment","text":"<p>Info</p> <p>This object was Extended from Environment</p>"},{"location":"documentation/autogen/index.html#properties_7","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-string-instancetype_2","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/index.html#methods_7","title":"Methods","text":""},{"location":"documentation/autogen/index.html#events_7","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#character","title":"Character","text":"<p>Info</p> <p>This object was Extended from Sprite</p> <p>This class is used for the player character and for npcs</p>"},{"location":"documentation/autogen/index.html#properties_8","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-number-health","title":"readonly number Health","text":"<p>The amount of health of the character</p>"},{"location":"documentation/autogen/index.html#rules-number-maxhealth","title":"rules number MaxHealth","text":"<p>The maximum amount of health of the character </p>"},{"location":"documentation/autogen/index.html#rules-number-walkspeed","title":"rules number WalkSpeed","text":"<p>The walk speed of the character</p>"},{"location":"documentation/autogen/index.html#rules-number-jumppower","title":"rules number JumpPower","text":"<p>The jump power of the character</p>"},{"location":"documentation/autogen/index.html#methods_8","title":"Methods","text":""},{"location":"documentation/autogen/index.html#void-updatehealthhealth-number","title":"void UpdateHealth<code>(Health: number)</code>","text":"<p>Updates the amount of health of the character </p>"},{"location":"documentation/autogen/index.html#void-jumpjumppower-number","title":"void Jump<code>(jumpPower: number?)</code>","text":"<p>The character jumps with the provided jump power, if none is provided it will use the JumpPower property as value </p>"},{"location":"documentation/autogen/index.html#void-movetotarget-vector2","title":"void MoveTo<code>(target: Vector2)</code>","text":"<p>The character walks directly to the provided position</p>"},{"location":"documentation/autogen/index.html#events_8","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#environment","title":"Environment","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>This class is used to storage objects and interact with them in an easier way</p>"},{"location":"documentation/autogen/index.html#properties_9","title":"Properties","text":""},{"location":"documentation/autogen/index.html#rules-table-content","title":"rules table Content","text":"Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#readonly-number-count","title":"readonly number Count","text":"<p>The amount of objects in this environment</p>"},{"location":"documentation/autogen/index.html#readonly-string-instancetype_3","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/index.html#methods_9","title":"Methods","text":""},{"location":"documentation/autogen/index.html#environment-constructor","title":"Environment Constructor<code>()</code>","text":""},{"location":"documentation/autogen/index.html#any-getindex-string","title":"any Get<code>(index: string)</code>","text":"<p>Gets the object with the specified index</p>"},{"location":"documentation/autogen/index.html#void-addonevalue-any-index-string","title":"void AddOne<code>(value: any, index: string)</code>","text":"<p>Adds an object with the specified index, if no parameter is specified it will use the next number of the count property as index</p>"},{"location":"documentation/autogen/index.html#void-removeoneindex-string","title":"void RemoveOne<code>(index: string)</code>","text":"<p>Removes the object with the specified index</p>"},{"location":"documentation/autogen/index.html#boolean-hasoneindex-string","title":"boolean HasOne<code>(index: string)</code>","text":"<p>Checks if the environment has a value with the specified index</p>"},{"location":"documentation/autogen/index.html#boolean-dictionary-hasobjects-arraystring","title":"(boolean, Dictionary) Has<code>(objects: Array&lt;string&gt;)</code> <p>Checks if the environment contains every specified index and returns a boolean and a dictionary with boolean values, example:     <pre><code>local hasAll, dictionary = treeEnv:Has({\n    \"Tree1\",\n    \"Tree2\",\n    \"Tree4\"\n})\n\nprint(hasAll, dictionary) -- output: false, { Tree1 = true, Tree2 = true, Tree4 = false }\n</code></pre></p>","text":""},{"location":"documentation/autogen/index.html#void-addobjects-dictionarystring-any","title":"void Add<code>(objects: Dictionary&lt;string, any&gt;)</code> <p>Adds objects with the specified index     <pre><code>treeEnv:Add({\n    \"Tree1\" = tree:new(),\n    \"Tree2\" = tree:new(),\n    \"Tree3\" = tree:new()\n})\n\nprint(treeEnv:Get(\"Tree2\")) -- output: Tree2\n</code></pre></p>","text":""},{"location":"documentation/autogen/index.html#void-removeobjects-arraystring","title":"void Remove<code>(objects: Array&lt;string&gt;)</code> <p>Removes the objects with the specified index, example:     <pre><code>treeEnv:Remove({ \"Tree1\", \"Tree2\", \"Tree3\" })\nprint(treeEnv:Get(\"Tree2\")) -- output: nil\n</code></pre></p>","text":""},{"location":"documentation/autogen/index.html#void-updateobjects-dictionarystring-any","title":"void Update<code>(objects: Dictionary&lt;string, any&gt;)</code> <p>Updates the objects with the specified index, example:     <pre><code>treeEnv:Update({\n    Tree1 = treeEnv:Get(\"Tree2\"),\n    Tree2 = treeEnv:Get(\"Tree1\"),\n})\n</code></pre></p>","text":""},{"location":"documentation/autogen/index.html#any-findbynamename-string","title":"any FindByName<code>(name: string)</code> <p>Finds an object by his name</p>","text":""},{"location":"documentation/autogen/index.html#void-setpropertyproperty-string-value-any","title":"void SetProperty<code>(property: string, value: any)</code> <p>Sets the specified property in every object in the environment</p>","text":""},{"location":"documentation/autogen/index.html#void-runmethod-string-any","title":"void Run<code>(method: string, ...any)</code> <p>Executes the specified methods in every object in the environment with the specified parameters</p>","text":""},{"location":"documentation/autogen/index.html#events_9","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#light","title":"Light","text":"<p>Info</p> <p>This object was Extended from PhysicalObject</p> <p>This class is used to illuminate areas in the darkness</p>"},{"location":"documentation/autogen/index.html#properties_10","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-boolean-trackcollisions","title":"readonly boolean TrackCollisions","text":"<p>Its a property of PhysicalObject, in this class is marked as readonly and is set false to optimizate</p>"},{"location":"documentation/autogen/index.html#rules-color3-color","title":"rules Color3 Color","text":""},{"location":"documentation/autogen/index.html#rules-number-range","title":"rules number Range","text":"<p>Is the range of the light</p>"},{"location":"documentation/autogen/index.html#rules-number-brightness","title":"rules number Brightness","text":"<p>Is the brightness of the light</p>"},{"location":"documentation/autogen/index.html#rules-boolean-track","title":"rules boolean Track","text":"<p>If this property is set to true the light is tracked, so it appears on the screen, if it is disabled and it was tracked at some point,         it will appear on the screen but if at any time another light enters in the range of this light, this light will start to modify the shape of the initial light, that's because we can say that when we disable the         the shape of the initial light, that is because it could be said that when we disable the Track property what remains on the screen is the trace of the light.</p>"},{"location":"documentation/autogen/index.html#methods_10","title":"Methods","text":""},{"location":"documentation/autogen/index.html#light-constructorscene-scene","title":"Light Constructor<code>(scene: Scene)</code>","text":""},{"location":"documentation/autogen/index.html#events_10","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#particle","title":"Particle","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>Warning<p>Currently it's recommended to use sprites to make particles/vfx, this class is in experimental state and can change a lot</p> <p>This class is used for vfx</p> </p>"},{"location":"documentation/autogen/index.html#properties_11","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-vector2-angle","title":"readonly Vector2 Angle","text":"<p>Depending on the value the particles will be more dispersed</p>"},{"location":"documentation/autogen/index.html#readonly-string-instancetype_4","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/index.html#readonly-character-subject_1","title":"readonly Character Subject","text":"<p>The subject which is going to be the center of emission of the particle, a character, sprite, etc...</p>"},{"location":"documentation/autogen/index.html#readonly-number-maxrate","title":"readonly number MaxRate","text":"<p>Is the maximum amount of particles that can exist at the same time</p>"},{"location":"documentation/autogen/index.html#readonly-number-units","title":"readonly number Units","text":"<p>Is the amount of particles that are existing at this moment</p>"},{"location":"documentation/autogen/index.html#rules-table-properties","title":"rules table Properties","text":"<p>Is a table with the initial properties of the particle which is going to be generated</p> Content <pre><code>{\n    Image: string,\n} \n</code></pre>"},{"location":"documentation/autogen/index.html#rules-table-goals","title":"rules table Goals","text":"<p>Is a table with the goals of the particles</p> Content <pre><code>{\n    Size: UDim2,\n    ImageTransparency: number,\n} \n</code></pre>"},{"location":"documentation/autogen/index.html#rules-tweeninfo-info","title":"rules TweenInfo Info","text":"<p>Is the tween info of the tween which is going to be used to move the particles</p>"},{"location":"documentation/autogen/index.html#rules-boolean-tracklight","title":"rules boolean TrackLight","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/index.html#rules-boolean-cancollide","title":"rules boolean CanCollide","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/index.html#rules-boolean-enabled","title":"rules boolean Enabled","text":"<p>When its enabled new particles can be emitted</p>"},{"location":"documentation/autogen/index.html#rules-number-lightbrightness","title":"rules number LightBrightness","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/index.html#rules-number-lightrange","title":"rules number LightRange","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/index.html#rules-number-range_1","title":"rules number Range","text":"<p>Is the distance that can be traveled by each particle </p>"},{"location":"documentation/autogen/index.html#rules-number-lifetime","title":"rules number LifeTime","text":"<p>The number of seconds the particle will be active before being destroyed</p>"},{"location":"documentation/autogen/index.html#rules-number-clock","title":"rules number Clock","text":"<p>Used for internal purposes</p>"},{"location":"documentation/autogen/index.html#rules-number-rate","title":"rules number Rate","text":"<p>Is the amount of particles which is going to be generated</p>"},{"location":"documentation/autogen/index.html#methods_11","title":"Methods","text":""},{"location":"documentation/autogen/index.html#void-setsubjectsubject-character_1","title":"void SetSubject<code>(subject: Character)</code> <p>Sets the subject property</p>","text":""},{"location":"documentation/autogen/index.html#void-setangleangle-vector2","title":"void SetAngle<code>(Angle: Vector2)</code> <p>Sets the angle property of the particle</p>","text":""},{"location":"documentation/autogen/index.html#void-setmaxratemaxrate-number","title":"void SetMaxRate<code>(maxRate: number)</code> <p>Sets the maximum amount of particles that can exist at the same time</p>","text":""},{"location":"documentation/autogen/index.html#void-emitrate-number","title":"void Emit<code>(rate: number)</code> <p>Emits the specified amount of particles, if none is provided then will use as amount the Rate property</p>","text":""},{"location":"documentation/autogen/index.html#events_11","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#physicalobject","title":"PhysicalObject","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>This class is used to create objects with physics</p>"},{"location":"documentation/autogen/index.html#properties_12","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-string-instancetype_5","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/index.html#readonly-number-chromaticaberrationintensity","title":"readonly number ChromaticAberrationIntensity","text":""},{"location":"documentation/autogen/index.html#readonly-number-chromaticaberrationdistance","title":"readonly number ChromaticAberrationDistance","text":""},{"location":"documentation/autogen/index.html#readonly-vector2-chromaticaberrationpoint","title":"readonly Vector2 ChromaticAberrationPoint","text":"<p>This is the point which is being used as reference for the chromatic aberration</p>"},{"location":"documentation/autogen/index.html#readonly-table-chromaticaberration","title":"readonly table ChromaticAberration","text":"<p>The instances which makes the chromatic aberration effect</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#readonly-table-collisions","title":"readonly table Collisions","text":"<p>This table stores all the active collisions</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#readonly-boolean-chromaticaberrationconnection","title":"readonly boolean ChromaticAberrationConnection","text":""},{"location":"documentation/autogen/index.html#rules-table-collisionblacklist","title":"rules table CollisionBlacklist","text":"<p>This dictionary stores all the blacklisted objects, to blacklist an object do it like this:         <pre><code>CollisionBlacklist[object.Id] = true\n</code></pre></p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#rules-table-hitbox","title":"rules table Hitbox","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#rules-number-mass","title":"rules number Mass","text":"<p>The object mass</p>"},{"location":"documentation/autogen/index.html#rules-number-hitboxscale","title":"rules number HitboxScale","text":""},{"location":"documentation/autogen/index.html#rules-number-collisiongroup","title":"rules number CollisionGroup","text":"<p>A number which indicates the collision group of the object, the object only can collide with other objects with the same CollisionGroup</p>"},{"location":"documentation/autogen/index.html#rules-boolean-anchored","title":"rules boolean Anchored","text":"<p>This property defines if the object should have physics or not</p>"},{"location":"documentation/autogen/index.html#rules-boolean-cancollide_1","title":"rules boolean CanCollide","text":"<p>This property defines if the object can collide with other objects</p>"},{"location":"documentation/autogen/index.html#rules-boolean-isgrounded","title":"rules boolean IsGrounded","text":"<p>This property indicates if the object is touching the ground</p>"},{"location":"documentation/autogen/index.html#rules-boolean-trackcollisions","title":"rules boolean TrackCollisions","text":"<p>This property defines if the object is going to have physics and collisions or not</p>"},{"location":"documentation/autogen/index.html#rules-string-hitboxshape","title":"rules string HitboxShape","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/index.html#rules-vector2-force","title":"rules Vector2 Force","text":"<p>Is the force which is applied in the moment to the object</p>"},{"location":"documentation/autogen/index.html#rules-vector2-velocity","title":"rules Vector2 Velocity","text":"<p>Is the velocity applied to the object</p>"},{"location":"documentation/autogen/index.html#methods_12","title":"Methods","text":""},{"location":"documentation/autogen/index.html#physicalobject-constructor","title":"PhysicalObject Constructor<code>()</code>","text":""},{"location":"documentation/autogen/index.html#void-sethitboxshapeshape-string","title":"void SetHitboxShape<code>(shape: string)</code>  <p>Warning<p>Sets the hitbox shape. Experimental, dont use</p> </p>","text":""},{"location":"documentation/autogen/index.html#void-loadurl-string","title":"void Load<code>(url: string)</code> <p>Loads an image for the current object and is set as the instance image</p>","text":""},{"location":"documentation/autogen/index.html#void-setchromaticaberrationintensity-number-distance-number-point-vector2","title":"void SetChromaticAberration<code>(Intensity: number, Distance: number, Point: Vector2)</code> <p>Sets chromatic aberration for the image using a center as reference, by default the center is the middle of the screen,      to disable the chromatic aberration send 0 as first parameter</p>","text":""},{"location":"documentation/autogen/index.html#events_12","title":"Events","text":"Name Description Collision Params -&gt; PhysicalObjectThis event is fired when the object collides with other object CollisionEnd Params -&gt; PhysicalObjectThis event is fired when the object finish the collision with other object"},{"location":"documentation/autogen/index.html#scene","title":"Scene","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>This class is useful to have a workspace and manage your project more easily</p>"},{"location":"documentation/autogen/index.html#properties_13","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-table-objects","title":"readonly table Objects","text":"<p>This table stores all the objects in the scene</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#readonly-string-instancetype_6","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/index.html#readonly-soundenvironment-soundenvironment","title":"readonly SoundEnvironment SoundEnvironment","text":"<p>This is the SoundEnvironment of the scene</p>"},{"location":"documentation/autogen/index.html#readonly-particleenvironment-particleenvironment","title":"readonly ParticleEnvironment ParticleEnvironment","text":"<p>This is the ParticleEnvironment of the scene</p>"},{"location":"documentation/autogen/index.html#readonly-lightingenvironment-lightingenvironment","title":"readonly LightingEnvironment LightingEnvironment","text":"<p>This is the LightingEnvironment of the scene</p>"},{"location":"documentation/autogen/index.html#methods_13","title":"Methods","text":""},{"location":"documentation/autogen/index.html#scene-constructorparent-instance","title":"Scene Constructor<code>(parent: Instance)</code>","text":""},{"location":"documentation/autogen/index.html#void-addobjectobject-baseobject","title":"void AddObject<code>(object: BaseObject)</code> <p>Adds the specified object</p>","text":""},{"location":"documentation/autogen/index.html#void-removeobjectobject-baseobject","title":"void RemoveObject<code>(object: BaseObject)</code> <p>Removes the specified object</p>","text":""},{"location":"documentation/autogen/index.html#baseobject-findbynamename-string","title":"BaseObject? FindByName<code>(name: string)</code> <p>Finds an object by his name</p>","text":""},{"location":"documentation/autogen/index.html#boolean-hasobjectobject-baseobject","title":"boolean HasObject<code>(object: BaseObject)</code> <p>Checks if the object is in the scene</p>","text":""},{"location":"documentation/autogen/index.html#array-gettaggedobjectstag-string","title":"Array GetTaggedObjects<code>(tag: string)</code> <p>Gets all the objects with the provided tags in the scene</p>","text":""},{"location":"documentation/autogen/index.html#raycast2dresult-raycastinfo-raycast2dparams","title":"Raycast2dResult Raycast<code>(info: Raycast2dParams)</code> <p>Casts a ray using the Raycast2dParams. If it finds an elegible object a Raycast2dResult is returned containing the results of the operations</p>","text":""},{"location":"documentation/autogen/index.html#events_13","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#sound","title":"Sound","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>This class is used to play sounds</p>"},{"location":"documentation/autogen/index.html#properties_14","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-string-instancetype_7","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/index.html#readonly-character-subject_2","title":"readonly Character Subject","text":"<p>This table stores all the objects in the scene</p>"},{"location":"documentation/autogen/index.html#rules-number-range_2","title":"rules number Range","text":"<p>This is the SoundEnvironment of the scene</p>"},{"location":"documentation/autogen/index.html#rules-number-maxvolume","title":"rules number MaxVolume","text":"<p>This is the ParticleEnvironment of the scene</p>"},{"location":"documentation/autogen/index.html#rules-boolean-distancefading","title":"rules boolean DistanceFading","text":"<p>The volume will depend on the player distance</p>"},{"location":"documentation/autogen/index.html#methods_14","title":"Methods","text":""},{"location":"documentation/autogen/index.html#void-setsubjectsubject-character-usescenesoundgroup-boolean","title":"void SetSubject<code>(subject: Character, useSceneSoundGroup: boolean?)</code> <p>Sets the provided character as subject, if is provided a sound group, this will be the new sound group of the sound</p>","text":""},{"location":"documentation/autogen/index.html#events_14","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#sprite","title":"Sprite","text":"<p>Info</p> <p>This object was Extended from PhysicalObject</p> <p>This class is used to play sounds</p>"},{"location":"documentation/autogen/index.html#properties_15","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-boolean-isplaying","title":"readonly boolean IsPlaying","text":"<p>Indicates if the sprite is playing</p>"},{"location":"documentation/autogen/index.html#readonly-table-active","title":"readonly table Active","text":"<p>This table stores information about the active spritesheet</p> Content <pre><code>{\n    Name: string,\n    CurrentFrame: Vector2,\n    SecondsPerFrame: number,\n    NextStepReady: boolean,\n} \n</code></pre>"},{"location":"documentation/autogen/index.html#rules-number-secondsperframe","title":"rules number SecondsPerFrame","text":"<p>This is the time to wait between frame and frame</p>"},{"location":"documentation/autogen/index.html#rules-table-sprites","title":"rules table Sprites","text":"<p>This table stores all sprite sheets and sprite lists </p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#methods_15","title":"Methods","text":""},{"location":"documentation/autogen/index.html#sprite-constructorparent-scene-size-vector2","title":"Sprite Constructor<code>(parent: Scene, size: Vector2)</code> <p>The second parameter is the size of a cell of every frame of an sprite sheet, this can be changed using the .ImageRectSize property of the object Instance </p>","text":""},{"location":"documentation/autogen/index.html#void-setspritesheetname-string-url-string-frames-vector2","title":"void SetSpriteSheet<code>(name: string, url: string, frames: Vector2)</code> <p>Adds a new sprite sheet to the object, the sprite will be played using as reference the amount of cells in the X axe and the Y axe, this must be provided in the third paramether as a Vector2</p>","text":""},{"location":"documentation/autogen/index.html#void-setspritelistname-string-list-arraystring","title":"void SetSpriteList<code>(name: string, list: Array&lt;string&gt;)</code> <p>Adds a new sprite list to the object, it will play the animation using the order in the provided list, this list must contain the urls of every frame</p>","text":""},{"location":"documentation/autogen/index.html#void-playname-string-secondsperframe-number","title":"void Play<code>(name: string, secondsPerFrame: number?)</code> <p>Plays the specified sprite if exists, if secondsEveryFrame is specified it will be used instead of .SecondsPerFrame</p>","text":""},{"location":"documentation/autogen/index.html#void-stop","title":"void Stop<code>()</code> <p>Stops the reproduction of the current playing sprite sheet or sprite list</p>","text":""},{"location":"documentation/autogen/index.html#events_15","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#crossplatformservice","title":"CrossPlatformService","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is used to make the controls functional in any device (Keyboards, Mobiles, Gamepads), this service vinculate actions      to specified keys, and also provides a movement system for the player character which can be disabled with the <code>DefaultControllersEnabled</code>     property, here is an example to make our player jumps in every device: <pre><code>--                                  Device,     Key,    Action\nCrossPlatformService:SetDeviceKey(\"Keyboard\", \"Space\", \"Jump\")\nCrossPlatformService:SetDeviceKey(\"Mobile\", \"JumpButton\", \"Jump\")\nCrossPlatformService:SetDeviceKey(\"Gamepad\", \"ButtonA\", \"Jump\")\n</code></pre></p> <p>But this is not limited only to movement actions, you can also assign other kind of actions, for example:</p> <pre><code>CrossPlatformService:SetDeviceKey(\"Keyboard\", \"E\", \"Collect\")\nCrossPlatformService:SetDeviceKey(\"Mobile\", \"JumpButton\", \"Collect\")\nCrossPlatformService:SetDeviceKey(\"Gamepad\", \"ButtonA\", \"Collect\")\n</code></pre> <p>We assigned an action for our devices but how can we detect when an action is triggered? well we can listen to three events \"InputBegin\", \"InputChange\", \"InputEnd\", example of use:</p> <pre><code>-- If the movement belongs to a stick, the second parameter will give the current position of the stick\nCrossPlatformService:On(\"InputBegin\", function(action, position)\n    local character = CrossPlatformService.Character\n\n    if action == \"Jump\" then\n        character:Jump(150)\n    end\nend)\n</code></pre>"},{"location":"documentation/autogen/index.html#properties_16","title":"Properties","text":""},{"location":"documentation/autogen/index.html#rules-boolean-defaultcontrollersenabled","title":"rules boolean DefaultControllersEnabled","text":"<p>Defines if the default movement system is enabled</p>"},{"location":"documentation/autogen/index.html#rules-boolean-sideview","title":"rules boolean SideView","text":"<p>Defines if the character is going to be seen from the side or from the top</p>"},{"location":"documentation/autogen/index.html#readonly-character-character","title":"readonly Character Character","text":"<p>This is the character which is going to be tracked by the camera</p>"},{"location":"documentation/autogen/index.html#readonly-number-sticksensibility","title":"readonly number StickSensibility","text":"<p>This is the sensibility of the sticks in mobile and in game controllers</p>"},{"location":"documentation/autogen/index.html#readonly-table-configs","title":"readonly table Configs","text":"<p>This table stores the default controllers</p> Content <pre><code>{\n    Keyboard:   {\n    W: string,\n    A: string,\n    S: string,\n    D: string,\n    Up: string,\n    Left: string,\n    Down: string,\n    Right: string,\n    Space: string,\n},\n    Gamepad:    {\n    ButtonA: string,\n    Thumbstick1:    {\n    Up: string,\n    Left: string,\n    Down: string,\n    Right: string,\n},\n},\n    Mobile:     {\n    JumpButton: string,\n    Thumbstick1:    {\n    Up: string,\n    Left: string,\n    Down: string,\n    Right: string,\n},\n},\n} \n</code></pre>"},{"location":"documentation/autogen/index.html#methods_16","title":"Methods","text":""},{"location":"documentation/autogen/index.html#void-setdevicekeydevice-string-key-string-action-string","title":"void SetDeviceKey<code>(device: string, key: string, action: string)</code> <p>Assigns an action to a device key, example:     <pre><code>CrossPlatformService:SetDeviceKey(\"Keyboard\", \"Space\", \"Jump\")\n</code></pre></p>","text":""},{"location":"documentation/autogen/index.html#void-setdeviceconfigdevice-string-controls-dictionarystring-string","title":"void SetDeviceConfig<code>(device: string, controls: Dictionary&lt;string, string?&gt;)</code> <p>Sets the entire configuration of a device, example:     <pre><code>CrossPlatformService:SetDeviceConfig(\"Keyboard\", {\n    W = \"Up\",\n    A = \"Left\",\n    S = \"Down\",\n    D = \"Right\",\n\n    Up = \"Up\",\n    Left = \"Left\",\n    Down = \"Down\",\n    Right = \"Right\",\n    Space = \"Jump\",\n})\n</code></pre></p>","text":""},{"location":"documentation/autogen/index.html#void-setplayercharactercharacter-character","title":"void SetPlayerCharacter<code>(character: Character)</code> <p>Sets the player character</p>","text":""},{"location":"documentation/autogen/index.html#events_16","title":"Events","text":"Name Description InputBegin Params -&gt; UpsideEngineInput Fired when one of the keys/sticks in the configuration is pressed/moved InputChange Params -&gt; UpsideEngineInput Fired when the an active input change its value, for example the position of a stick InputEnd Params -&gt; UpsideEngineInput Fired when one of the keys/sticks in the configuration finish to be pressed/moved"},{"location":"documentation/autogen/index.html#networkingservice","title":"NetworkingService","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is to replicate objects to other clients, for example the player character</p>"},{"location":"documentation/autogen/index.html#properties_17","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-table-players","title":"readonly table Players","text":"<p>A dictionary with the replicated objects by the clients</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#rules-boolean-destroyobjectsonleave","title":"rules boolean DestroyObjectsOnLeave","text":"<p>Defines if the replicated objects by other clients should be destroyed when they leaves</p>"},{"location":"documentation/autogen/index.html#methods_17","title":"Methods","text":""},{"location":"documentation/autogen/index.html#void-replicateobject-baseobject","title":"void Replicate<code>(object: BaseObject)</code> <p>Replicates an object to other clients</p>","text":""},{"location":"documentation/autogen/index.html#connection-connection-replicateonchangeobject-baseobject","title":"(Connection, Connection) ReplicateOnChange<code>(object: BaseObject)</code> <p>Replicates an object and each change on it, and returns the connections that detect each change of the object</p>","text":""},{"location":"documentation/autogen/index.html#events_17","title":"Events","text":"Name Description ReplicationRequest Params -&gt; Request Fired when a request is received by the client"},{"location":"documentation/autogen/index.html#pluginsupportservice","title":"PluginSupportService","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class save and build the engine data</p>"},{"location":"documentation/autogen/index.html#properties_18","title":"Properties","text":""},{"location":"documentation/autogen/index.html#methods_18","title":"Methods","text":""},{"location":"documentation/autogen/index.html#void-loadplugincontent","title":"void LoadPluginContent<code>()</code> <p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>","text":""},{"location":"documentation/autogen/index.html#void-saveplugincontentcontent","title":"void SavePluginContent<code>(content: {})</code> <p>Saves the engine data in replicated storage as attribute with the name \"UpsideEngineDB\" can be useful to create plugins</p>","text":""},{"location":"documentation/autogen/index.html#events_18","title":"Events","text":"Name Description"},{"location":"documentation/autogen/index.html#scenemanager","title":"SceneManager","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class save and build the engine data</p>"},{"location":"documentation/autogen/index.html#properties_19","title":"Properties","text":""},{"location":"documentation/autogen/index.html#readonly-table-scenes","title":"readonly table Scenes","text":"Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#readonly-table-activescenes","title":"readonly table ActiveScenes","text":"<p>This dictionary stores all the active scenes</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/index.html#methods_19","title":"Methods","text":""},{"location":"documentation/autogen/index.html#void-loadscene-scene","title":"void Load<code>(scene: Scene)</code> <p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>","text":""},{"location":"documentation/autogen/index.html#void-unloadscene-scene","title":"void Unload<code>(scene: Scene)</code> <p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>","text":""},{"location":"documentation/autogen/index.html#scene-findbynamename-string","title":"Scene? FindByName<code>(name: string)</code> <p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>","text":""},{"location":"documentation/autogen/index.html#scene-getid-string","title":"Scene Get<code>(Id: string)</code> <p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>","text":""},{"location":"documentation/autogen/index.html#events_19","title":"Events","text":"Name Description SceneLoaded Params -&gt; Scene Fired when a scene is loaded SceneUnloaded Params -&gt; Scene Fired when a scene is unloaded"},{"location":"documentation/autogen/BaseObject.html","title":"BaseObject","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is the base class of the majority of classes</p>"},{"location":"documentation/autogen/BaseObject.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/BaseObject.html#readonly-instance-instance","title":"readonly Instance Instance","text":"<p>The object instance</p>"},{"location":"documentation/autogen/BaseObject.html#readonly-string-scene","title":"readonly string Scene","text":"<p>The object scene ID</p>"},{"location":"documentation/autogen/BaseObject.html#readonly-string-instancetype","title":"readonly string InstanceType","text":"<p>The class name of the object instance</p>"},{"location":"documentation/autogen/BaseObject.html#readonly-table-tags","title":"readonly table Tags","text":"<p>This table stores all the tags of the object</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/BaseObject.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/BaseObject.html#baseobject-constructorparent-scene","title":"BaseObject Constructor<code>(parent: Scene)</code>","text":""},{"location":"documentation/autogen/BaseObject.html#void-setproperties-dictionarystring-any","title":"void Set<code>(properties: Dictionary&lt;string, any&gt;)</code>","text":"<p>Sets the properties of the object instance</p>"},{"location":"documentation/autogen/BaseObject.html#void-addtagtag-string","title":"void AddTag<code>(tag: string)</code>","text":"<p>Adds a tag to the object</p>"},{"location":"documentation/autogen/BaseObject.html#boolean-hastagtag-string","title":"boolean HasTag<code>(tag: string)</code>","text":"<p>Checks if the object contain the specified tag</p>"},{"location":"documentation/autogen/BaseObject.html#void-removetagtag-string","title":"void RemoveTag<code>(tag: string)</code>","text":"<p>Removes a tag from the object</p>"},{"location":"documentation/autogen/BaseObject.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/Camera.html","title":"Camera","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is included on every scene, it's used to move you around the scene</p>"},{"location":"documentation/autogen/Camera.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Camera.html#readonly-character-subject","title":"readonly Character Subject","text":"<p>This property defines the object which is going to follow the camera</p>"},{"location":"documentation/autogen/Camera.html#rules-boolean-followsubject","title":"rules boolean FollowSubject","text":"<p>This property defines if the camera is going to follow the defined subject</p>"},{"location":"documentation/autogen/Camera.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Camera.html#camera-constructorscene-scene","title":"Camera Constructor<code>(scene: Scene)</code>","text":""},{"location":"documentation/autogen/Camera.html#void-getposition","title":"void GetPosition<code>()</code>","text":"<p>Gets the camera position</p>"},{"location":"documentation/autogen/Camera.html#void-setpositionudim2-udim2","title":"void SetPosition<code>(udim2: UDim2)</code>","text":"<p>Sets the camera position</p>"},{"location":"documentation/autogen/Camera.html#void-setsubjectsubject-character","title":"void SetSubject<code>(subject: Character)</code>","text":"<p>Sets the camera subject</p>"},{"location":"documentation/autogen/Camera.html#void-looktoobject-physicalobject","title":"void LookTo<code>(object: PhysicalObject)</code>","text":""},{"location":"documentation/autogen/Camera.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/Character.html","title":"Character","text":"<p>Info</p> <p>This object was Extended from Sprite</p> <p>This class is used for the player character and for npcs</p>"},{"location":"documentation/autogen/Character.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Character.html#readonly-number-health","title":"readonly number Health","text":"<p>The amount of health of the character</p>"},{"location":"documentation/autogen/Character.html#rules-number-maxhealth","title":"rules number MaxHealth","text":"<p>The maximum amount of health of the character </p>"},{"location":"documentation/autogen/Character.html#rules-number-walkspeed","title":"rules number WalkSpeed","text":"<p>The walk speed of the character</p>"},{"location":"documentation/autogen/Character.html#rules-number-jumppower","title":"rules number JumpPower","text":"<p>The jump power of the character</p>"},{"location":"documentation/autogen/Character.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Character.html#void-updatehealthhealth-number","title":"void UpdateHealth<code>(Health: number)</code>","text":"<p>Updates the amount of health of the character </p>"},{"location":"documentation/autogen/Character.html#void-jumpjumppower-number","title":"void Jump<code>(jumpPower: number?)</code>","text":"<p>The character jumps with the provided jump power, if none is provided it will use the JumpPower property as value </p>"},{"location":"documentation/autogen/Character.html#void-movetotarget-vector2","title":"void MoveTo<code>(target: Vector2)</code>","text":"<p>The character walks directly to the provided position</p>"},{"location":"documentation/autogen/Character.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/Connection.html","title":"Connection","text":"<p>Info</p> <p>This object was Extended from BaseClass</p> <p>This class is used in the event emitter class, its used to manage a listener</p>"},{"location":"documentation/autogen/Connection.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Connection.html#readonly-boolean-active","title":"readonly boolean Active","text":"<p>Defines if the connection is active or not</p>"},{"location":"documentation/autogen/Connection.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Connection.html#connection-constructoreventid-number-event-dictionarystring-table","title":"Connection Constructor<code>(eventId: number, event: Dictionary&lt;string, table&gt;)</code>","text":""},{"location":"documentation/autogen/Connection.html#thread-waitseconds-number","title":"thread? Wait<code>(seconds: number?)</code>","text":"<p>Wait until the event gets fired, if seconds were specified, once the specified seconds have elapsed, it will stop waiting</p>"},{"location":"documentation/autogen/Connection.html#void-disconnect","title":"void Disconnect<code>()</code>","text":"<p>Deletes the connection and the listener</p>"},{"location":"documentation/autogen/Connection.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/CrossPlatformService.html","title":"CrossPlatformService","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is used to make the controls functional in any device (Keyboards, Mobiles, Gamepads), this service vinculate actions      to specified keys, and also provides a movement system for the player character which can be disabled with the <code>DefaultControllersEnabled</code>     property, here is an example to make our player jumps in every device: <pre><code>--                                  Device,     Key,    Action\nCrossPlatformService:SetDeviceKey(\"Keyboard\", \"Space\", \"Jump\")\nCrossPlatformService:SetDeviceKey(\"Mobile\", \"JumpButton\", \"Jump\")\nCrossPlatformService:SetDeviceKey(\"Gamepad\", \"ButtonA\", \"Jump\")\n</code></pre></p> <p>But this is not limited only to movement actions, you can also assign other kind of actions, for example:</p> <pre><code>CrossPlatformService:SetDeviceKey(\"Keyboard\", \"E\", \"Collect\")\nCrossPlatformService:SetDeviceKey(\"Mobile\", \"JumpButton\", \"Collect\")\nCrossPlatformService:SetDeviceKey(\"Gamepad\", \"ButtonA\", \"Collect\")\n</code></pre> <p>We assigned an action for our devices but how can we detect when an action is triggered? well we can listen to three events \"InputBegin\", \"InputChange\", \"InputEnd\", example of use:</p> <pre><code>-- If the movement belongs to a stick, the second parameter will give the current position of the stick\nCrossPlatformService:On(\"InputBegin\", function(action, position)\n    local character = CrossPlatformService.Character\n\n    if action == \"Jump\" then\n        character:Jump(150)\n    end\nend)\n</code></pre>"},{"location":"documentation/autogen/CrossPlatformService.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/CrossPlatformService.html#rules-boolean-defaultcontrollersenabled","title":"rules boolean DefaultControllersEnabled","text":"<p>Defines if the default movement system is enabled</p>"},{"location":"documentation/autogen/CrossPlatformService.html#rules-boolean-sideview","title":"rules boolean SideView","text":"<p>Defines if the character is going to be seen from the side or from the top</p>"},{"location":"documentation/autogen/CrossPlatformService.html#readonly-character-character","title":"readonly Character Character","text":"<p>This is the character which is going to be tracked by the camera</p>"},{"location":"documentation/autogen/CrossPlatformService.html#readonly-number-sticksensibility","title":"readonly number StickSensibility","text":"<p>This is the sensibility of the sticks in mobile and in game controllers</p>"},{"location":"documentation/autogen/CrossPlatformService.html#readonly-table-configs","title":"readonly table Configs","text":"<p>This table stores the default controllers</p> Content <pre><code>{\n    Keyboard:   {\n    W: string,\n    A: string,\n    S: string,\n    D: string,\n    Up: string,\n    Left: string,\n    Down: string,\n    Right: string,\n    Space: string,\n},\n    Gamepad:    {\n    ButtonA: string,\n    Thumbstick1:    {\n    Up: string,\n    Left: string,\n    Down: string,\n    Right: string,\n},\n},\n    Mobile:     {\n    JumpButton: string,\n    Thumbstick1:    {\n    Up: string,\n    Left: string,\n    Down: string,\n    Right: string,\n},\n},\n} \n</code></pre>"},{"location":"documentation/autogen/CrossPlatformService.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/CrossPlatformService.html#void-setdevicekeydevice-string-key-string-action-string","title":"void SetDeviceKey<code>(device: string, key: string, action: string)</code>","text":"<p>Assigns an action to a device key, example:     <pre><code>CrossPlatformService:SetDeviceKey(\"Keyboard\", \"Space\", \"Jump\")\n</code></pre></p>"},{"location":"documentation/autogen/CrossPlatformService.html#void-setdeviceconfigdevice-string-controls-dictionarystring-string","title":"void SetDeviceConfig<code>(device: string, controls: Dictionary&lt;string, string?&gt;)</code>","text":"<p>Sets the entire configuration of a device, example:     <pre><code>CrossPlatformService:SetDeviceConfig(\"Keyboard\", {\n    W = \"Up\",\n    A = \"Left\",\n    S = \"Down\",\n    D = \"Right\",\n\n    Up = \"Up\",\n    Left = \"Left\",\n    Down = \"Down\",\n    Right = \"Right\",\n    Space = \"Jump\",\n})\n</code></pre></p>"},{"location":"documentation/autogen/CrossPlatformService.html#void-setplayercharactercharacter-character","title":"void SetPlayerCharacter<code>(character: Character)</code>","text":"<p>Sets the player character</p>"},{"location":"documentation/autogen/CrossPlatformService.html#events","title":"Events","text":"Name Description InputBegin Params -&gt; UpsideEngineInput Fired when one of the keys/sticks in the configuration is pressed/moved InputChange Params -&gt; UpsideEngineInput Fired when the an active input change its value, for example the position of a stick InputEnd Params -&gt; UpsideEngineInput Fired when one of the keys/sticks in the configuration finish to be pressed/moved"},{"location":"documentation/autogen/Environment.html","title":"Environment","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>This class is used to storage objects and interact with them in an easier way</p>"},{"location":"documentation/autogen/Environment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Environment.html#rules-table-content","title":"rules table Content","text":"Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/Environment.html#readonly-number-count","title":"readonly number Count","text":"<p>The amount of objects in this environment</p>"},{"location":"documentation/autogen/Environment.html#readonly-string-instancetype","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/Environment.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Environment.html#environment-constructor","title":"Environment Constructor<code>()</code>","text":""},{"location":"documentation/autogen/Environment.html#any-getindex-string","title":"any Get<code>(index: string)</code>","text":"<p>Gets the object with the specified index</p>"},{"location":"documentation/autogen/Environment.html#void-addonevalue-any-index-string","title":"void AddOne<code>(value: any, index: string)</code>","text":"<p>Adds an object with the specified index, if no parameter is specified it will use the next number of the count property as index</p>"},{"location":"documentation/autogen/Environment.html#void-removeoneindex-string","title":"void RemoveOne<code>(index: string)</code>","text":"<p>Removes the object with the specified index</p>"},{"location":"documentation/autogen/Environment.html#boolean-hasoneindex-string","title":"boolean HasOne<code>(index: string)</code>","text":"<p>Checks if the environment has a value with the specified index</p>"},{"location":"documentation/autogen/Environment.html#boolean-dictionary-hasobjects-arraystring","title":"(boolean, Dictionary) Has<code>(objects: Array&lt;string&gt;)</code> <p>Checks if the environment contains every specified index and returns a boolean and a dictionary with boolean values, example:     <pre><code>local hasAll, dictionary = treeEnv:Has({\n    \"Tree1\",\n    \"Tree2\",\n    \"Tree4\"\n})\n\nprint(hasAll, dictionary) -- output: false, { Tree1 = true, Tree2 = true, Tree4 = false }\n</code></pre></p>","text":""},{"location":"documentation/autogen/Environment.html#void-addobjects-dictionarystring-any","title":"void Add<code>(objects: Dictionary&lt;string, any&gt;)</code> <p>Adds objects with the specified index     <pre><code>treeEnv:Add({\n    \"Tree1\" = tree:new(),\n    \"Tree2\" = tree:new(),\n    \"Tree3\" = tree:new()\n})\n\nprint(treeEnv:Get(\"Tree2\")) -- output: Tree2\n</code></pre></p>","text":""},{"location":"documentation/autogen/Environment.html#void-removeobjects-arraystring","title":"void Remove<code>(objects: Array&lt;string&gt;)</code> <p>Removes the objects with the specified index, example:     <pre><code>treeEnv:Remove({ \"Tree1\", \"Tree2\", \"Tree3\" })\nprint(treeEnv:Get(\"Tree2\")) -- output: nil\n</code></pre></p>","text":""},{"location":"documentation/autogen/Environment.html#void-updateobjects-dictionarystring-any","title":"void Update<code>(objects: Dictionary&lt;string, any&gt;)</code> <p>Updates the objects with the specified index, example:     <pre><code>treeEnv:Update({\n    Tree1 = treeEnv:Get(\"Tree2\"),\n    Tree2 = treeEnv:Get(\"Tree1\"),\n})\n</code></pre></p>","text":""},{"location":"documentation/autogen/Environment.html#any-findbynamename-string","title":"any FindByName<code>(name: string)</code> <p>Finds an object by his name</p>","text":""},{"location":"documentation/autogen/Environment.html#void-setpropertyproperty-string-value-any","title":"void SetProperty<code>(property: string, value: any)</code> <p>Sets the specified property in every object in the environment</p>","text":""},{"location":"documentation/autogen/Environment.html#void-runmethod-string-any","title":"void Run<code>(method: string, ...any)</code> <p>Executes the specified methods in every object in the environment with the specified parameters</p>","text":""},{"location":"documentation/autogen/Environment.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/EventEmitter.html","title":"EventEmitter","text":"<p>Info</p> <p>This object was Extended from BaseClass</p> <p>The event emitter is used to manage the events of a class</p>"},{"location":"documentation/autogen/EventEmitter.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/EventEmitter.html#readonly-table-eventsstorage","title":"readonly table EventsStorage","text":"<p>This table store all the events of the class</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/EventEmitter.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/EventEmitter.html#connection-onname-string-callback-","title":"Connection On<code>(name: string, callback: () -&gt; ())</code>","text":""},{"location":"documentation/autogen/EventEmitter.html#void-firename-string-any","title":"void Fire<code>(name: string, ...any)</code>","text":"<p>Triggers an event with the specified arguments</p>"},{"location":"documentation/autogen/EventEmitter.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/Light.html","title":"Light","text":"<p>Info</p> <p>This object was Extended from PhysicalObject</p> <p>This class is used to illuminate areas in the darkness</p>"},{"location":"documentation/autogen/Light.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Light.html#readonly-boolean-trackcollisions","title":"readonly boolean TrackCollisions","text":"<p>Its a property of PhysicalObject, in this class is marked as readonly and is set false to optimizate</p>"},{"location":"documentation/autogen/Light.html#rules-color3-color","title":"rules Color3 Color","text":""},{"location":"documentation/autogen/Light.html#rules-number-range","title":"rules number Range","text":"<p>Is the range of the light</p>"},{"location":"documentation/autogen/Light.html#rules-number-brightness","title":"rules number Brightness","text":"<p>Is the brightness of the light</p>"},{"location":"documentation/autogen/Light.html#rules-boolean-track","title":"rules boolean Track","text":"<p>If this property is set to true the light is tracked, so it appears on the screen, if it is disabled and it was tracked at some point,         it will appear on the screen but if at any time another light enters in the range of this light, this light will start to modify the shape of the initial light, that's because we can say that when we disable the         the shape of the initial light, that is because it could be said that when we disable the Track property what remains on the screen is the trace of the light.</p>"},{"location":"documentation/autogen/Light.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Light.html#light-constructorscene-scene","title":"Light Constructor<code>(scene: Scene)</code>","text":""},{"location":"documentation/autogen/Light.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/LightingEnvironment.html","title":"LightingEnvironment","text":"<p>Info</p> <p>This object was Extended from Environment</p> <p>This class is one of the most important components of a scene, is used to manage everything related with the light </p>"},{"location":"documentation/autogen/LightingEnvironment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/LightingEnvironment.html#rules-color3-ambientcolor","title":"rules Color3 AmbientColor","text":"<p>This is the color of every pixel of the ambient, we can say is the darkness color</p>"},{"location":"documentation/autogen/LightingEnvironment.html#rules-number-ambienttransparency","title":"rules number AmbientTransparency","text":"<p>This is the transparency of the ambient, we can say is the darkness transparency</p>"},{"location":"documentation/autogen/LightingEnvironment.html#rules-number-updatefrequency","title":"rules number UpdateFrequency","text":"<p>This is the seconds between every update of the pixels in the screen</p>"},{"location":"documentation/autogen/LightingEnvironment.html#rules-number-pixelindex","title":"rules number PixelIndex","text":"<p>This is the pixel in the middle of every large pixel, used for internal purposes</p>"},{"location":"documentation/autogen/LightingEnvironment.html#rules-number-distance","title":"rules number Distance","text":"<p>This is the distance between every large pixel, used for internal purposes</p>"},{"location":"documentation/autogen/LightingEnvironment.html#readonly-string-instancetype","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/LightingEnvironment.html#readonly-table-pixels","title":"readonly table Pixels","text":"<p>Stores all the ambient pixels</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/LightingEnvironment.html#readonly-number-lightingintensity","title":"readonly number LightingIntensity","text":""},{"location":"documentation/autogen/LightingEnvironment.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/LightingEnvironment.html#lightingenvironment-constructorparent-frame","title":"LightingEnvironment Constructor<code>(parent: Frame)</code>","text":""},{"location":"documentation/autogen/LightingEnvironment.html#void-drawpixelssettings-any","title":"void DrawPixels<code>(settings: any)</code>","text":"<p>Draws the pixels for the scene with the specified settings     <pre><code>    settings = {\n        Pixels = 800, -- We can say that is the resolution for the ambient, is limited to 2000\n        Resolution = Vector2.new(1080, 1920) -- Defines the resolution to take as reference, is going to use the screen resolution if none is specified\n        AutoScale = true -- Defines if the amount of pixels is going to be scaled depending on the resolution\n    }\n</code></pre></p>"},{"location":"documentation/autogen/LightingEnvironment.html#void-setlightingintensityvalue-number","title":"void SetLightingIntensity<code>(value: number)</code>","text":"<p>Sets the base intensity for all the lights in the scene</p>"},{"location":"documentation/autogen/LightingEnvironment.html#void-getlightingintensity","title":"void GetLightingIntensity<code>()</code>","text":"<p>Gets the base intensity for all the lights in the scene </p>"},{"location":"documentation/autogen/LightingEnvironment.html#void-updatescreen","title":"void UpdateScreen<code>()</code>","text":"<p>Updates the position, the transparency and the color of the ambient</p>"},{"location":"documentation/autogen/LightingEnvironment.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/NetworkingService.html","title":"NetworkingService","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is to replicate objects to other clients, for example the player character</p>"},{"location":"documentation/autogen/NetworkingService.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/NetworkingService.html#readonly-table-players","title":"readonly table Players","text":"<p>A dictionary with the replicated objects by the clients</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/NetworkingService.html#rules-boolean-destroyobjectsonleave","title":"rules boolean DestroyObjectsOnLeave","text":"<p>Defines if the replicated objects by other clients should be destroyed when they leaves</p>"},{"location":"documentation/autogen/NetworkingService.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/NetworkingService.html#void-replicateobject-baseobject","title":"void Replicate<code>(object: BaseObject)</code>","text":"<p>Replicates an object to other clients</p>"},{"location":"documentation/autogen/NetworkingService.html#connection-connection-replicateonchangeobject-baseobject","title":"(Connection, Connection) ReplicateOnChange<code>(object: BaseObject)</code>","text":"<p>Replicates an object and each change on it, and returns the connections that detect each change of the object</p>"},{"location":"documentation/autogen/NetworkingService.html#events","title":"Events","text":"Name Description ReplicationRequest Params -&gt; Request Fired when a request is received by the client"},{"location":"documentation/autogen/Particle.html","title":"Particle","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>Warning<p>Currently it's recommended to use sprites to make particles/vfx, this class is in experimental state and can change a lot</p> <p>This class is used for vfx</p> </p>"},{"location":"documentation/autogen/Particle.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Particle.html#readonly-vector2-angle","title":"readonly Vector2 Angle","text":"<p>Depending on the value the particles will be more dispersed</p>"},{"location":"documentation/autogen/Particle.html#readonly-string-instancetype","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/Particle.html#readonly-character-subject","title":"readonly Character Subject","text":"<p>The subject which is going to be the center of emission of the particle, a character, sprite, etc...</p>"},{"location":"documentation/autogen/Particle.html#readonly-number-maxrate","title":"readonly number MaxRate","text":"<p>Is the maximum amount of particles that can exist at the same time</p>"},{"location":"documentation/autogen/Particle.html#readonly-number-units","title":"readonly number Units","text":"<p>Is the amount of particles that are existing at this moment</p>"},{"location":"documentation/autogen/Particle.html#rules-table-properties","title":"rules table Properties","text":"<p>Is a table with the initial properties of the particle which is going to be generated</p> Content <pre><code>{\n    Image: string,\n} \n</code></pre>"},{"location":"documentation/autogen/Particle.html#rules-table-goals","title":"rules table Goals","text":"<p>Is a table with the goals of the particles</p> Content <pre><code>{\n    Size: UDim2,\n    ImageTransparency: number,\n} \n</code></pre>"},{"location":"documentation/autogen/Particle.html#rules-tweeninfo-info","title":"rules TweenInfo Info","text":"<p>Is the tween info of the tween which is going to be used to move the particles</p>"},{"location":"documentation/autogen/Particle.html#rules-boolean-tracklight","title":"rules boolean TrackLight","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/Particle.html#rules-boolean-cancollide","title":"rules boolean CanCollide","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/Particle.html#rules-boolean-enabled","title":"rules boolean Enabled","text":"<p>When its enabled new particles can be emitted</p>"},{"location":"documentation/autogen/Particle.html#rules-number-lightbrightness","title":"rules number LightBrightness","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/Particle.html#rules-number-lightrange","title":"rules number LightRange","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/Particle.html#rules-number-range","title":"rules number Range","text":"<p>Is the distance that can be traveled by each particle </p>"},{"location":"documentation/autogen/Particle.html#rules-number-lifetime","title":"rules number LifeTime","text":"<p>The number of seconds the particle will be active before being destroyed</p>"},{"location":"documentation/autogen/Particle.html#rules-number-clock","title":"rules number Clock","text":"<p>Used for internal purposes</p>"},{"location":"documentation/autogen/Particle.html#rules-number-rate","title":"rules number Rate","text":"<p>Is the amount of particles which is going to be generated</p>"},{"location":"documentation/autogen/Particle.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Particle.html#void-setsubjectsubject-character","title":"void SetSubject<code>(subject: Character)</code>","text":"<p>Sets the subject property</p>"},{"location":"documentation/autogen/Particle.html#void-setangleangle-vector2","title":"void SetAngle<code>(Angle: Vector2)</code>","text":"<p>Sets the angle property of the particle</p>"},{"location":"documentation/autogen/Particle.html#void-setmaxratemaxrate-number","title":"void SetMaxRate<code>(maxRate: number)</code>","text":"<p>Sets the maximum amount of particles that can exist at the same time</p>"},{"location":"documentation/autogen/Particle.html#void-emitrate-number","title":"void Emit<code>(rate: number)</code>","text":"<p>Emits the specified amount of particles, if none is provided then will use as amount the Rate property</p>"},{"location":"documentation/autogen/Particle.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/ParticleEnvironment.html","title":"ParticleEnvironment","text":"<p>Info</p> <p>This object was Extended from Environment</p>"},{"location":"documentation/autogen/ParticleEnvironment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/ParticleEnvironment.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/ParticleEnvironment.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/PhysicalObject.html","title":"PhysicalObject","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>This class is used to create objects with physics</p>"},{"location":"documentation/autogen/PhysicalObject.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/PhysicalObject.html#readonly-string-instancetype","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/PhysicalObject.html#readonly-number-chromaticaberrationintensity","title":"readonly number ChromaticAberrationIntensity","text":""},{"location":"documentation/autogen/PhysicalObject.html#readonly-number-chromaticaberrationdistance","title":"readonly number ChromaticAberrationDistance","text":""},{"location":"documentation/autogen/PhysicalObject.html#readonly-vector2-chromaticaberrationpoint","title":"readonly Vector2 ChromaticAberrationPoint","text":"<p>This is the point which is being used as reference for the chromatic aberration</p>"},{"location":"documentation/autogen/PhysicalObject.html#readonly-table-chromaticaberration","title":"readonly table ChromaticAberration","text":"<p>The instances which makes the chromatic aberration effect</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/PhysicalObject.html#readonly-table-collisions","title":"readonly table Collisions","text":"<p>This table stores all the active collisions</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/PhysicalObject.html#readonly-boolean-chromaticaberrationconnection","title":"readonly boolean ChromaticAberrationConnection","text":""},{"location":"documentation/autogen/PhysicalObject.html#rules-table-collisionblacklist","title":"rules table CollisionBlacklist","text":"<p>This dictionary stores all the blacklisted objects, to blacklist an object do it like this:         <pre><code>CollisionBlacklist[object.Id] = true\n</code></pre></p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/PhysicalObject.html#rules-table-hitbox","title":"rules table Hitbox","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/PhysicalObject.html#rules-number-mass","title":"rules number Mass","text":"<p>The object mass</p>"},{"location":"documentation/autogen/PhysicalObject.html#rules-number-hitboxscale","title":"rules number HitboxScale","text":""},{"location":"documentation/autogen/PhysicalObject.html#rules-number-collisiongroup","title":"rules number CollisionGroup","text":"<p>A number which indicates the collision group of the object, the object only can collide with other objects with the same CollisionGroup</p>"},{"location":"documentation/autogen/PhysicalObject.html#rules-boolean-anchored","title":"rules boolean Anchored","text":"<p>This property defines if the object should have physics or not</p>"},{"location":"documentation/autogen/PhysicalObject.html#rules-boolean-cancollide","title":"rules boolean CanCollide","text":"<p>This property defines if the object can collide with other objects</p>"},{"location":"documentation/autogen/PhysicalObject.html#rules-boolean-isgrounded","title":"rules boolean IsGrounded","text":"<p>This property indicates if the object is touching the ground</p>"},{"location":"documentation/autogen/PhysicalObject.html#rules-boolean-trackcollisions","title":"rules boolean TrackCollisions","text":"<p>This property defines if the object is going to have physics and collisions or not</p>"},{"location":"documentation/autogen/PhysicalObject.html#rules-string-hitboxshape","title":"rules string HitboxShape","text":"<p>Warning<pre><code>Experimental, dont use\n</code></pre> </p>"},{"location":"documentation/autogen/PhysicalObject.html#rules-vector2-force","title":"rules Vector2 Force","text":"<p>Is the force which is applied in the moment to the object</p>"},{"location":"documentation/autogen/PhysicalObject.html#rules-vector2-velocity","title":"rules Vector2 Velocity","text":"<p>Is the velocity applied to the object</p>"},{"location":"documentation/autogen/PhysicalObject.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/PhysicalObject.html#physicalobject-constructor","title":"PhysicalObject Constructor<code>()</code>","text":""},{"location":"documentation/autogen/PhysicalObject.html#void-sethitboxshapeshape-string","title":"void SetHitboxShape<code>(shape: string)</code>","text":"<p>Warning<p>Sets the hitbox shape. Experimental, dont use</p> </p>"},{"location":"documentation/autogen/PhysicalObject.html#void-loadurl-string","title":"void Load<code>(url: string)</code>","text":"<p>Loads an image for the current object and is set as the instance image</p>"},{"location":"documentation/autogen/PhysicalObject.html#void-setchromaticaberrationintensity-number-distance-number-point-vector2","title":"void SetChromaticAberration<code>(Intensity: number, Distance: number, Point: Vector2)</code>","text":"<p>Sets chromatic aberration for the image using a center as reference, by default the center is the middle of the screen,      to disable the chromatic aberration send 0 as first parameter</p>"},{"location":"documentation/autogen/PhysicalObject.html#events","title":"Events","text":"Name Description Collision Params -&gt; PhysicalObjectThis event is fired when the object collides with other object CollisionEnd Params -&gt; PhysicalObjectThis event is fired when the object finish the collision with other object"},{"location":"documentation/autogen/PluginSupportService.html","title":"PluginSupportService","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class save and build the engine data</p>"},{"location":"documentation/autogen/PluginSupportService.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/PluginSupportService.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/PluginSupportService.html#void-loadplugincontent","title":"void LoadPluginContent<code>()</code>","text":"<p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>"},{"location":"documentation/autogen/PluginSupportService.html#void-saveplugincontentcontent","title":"void SavePluginContent<code>(content: {})</code>","text":"<p>Saves the engine data in replicated storage as attribute with the name \"UpsideEngineDB\" can be useful to create plugins</p>"},{"location":"documentation/autogen/PluginSupportService.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/Request.html","title":"Request","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class is used for the client replication</p>"},{"location":"documentation/autogen/Request.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Request.html#readonly-table-content","title":"readonly table Content","text":"<p>The content of the request</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/Request.html#readonly-number-clientid","title":"readonly number ClientId","text":"<p>The UserId of the client which sent the request if exists </p>"},{"location":"documentation/autogen/Request.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Request.html#request-constructorclientid-number-content-dictionarystring-any","title":"Request Constructor<code>(clientId: number, content: Dictionary&lt;string, any&gt;)</code>","text":""},{"location":"documentation/autogen/Request.html#void-sendcontent-dictionarystring-any","title":"void Send<code>(content: Dictionary&lt;string, any&gt;)</code>","text":"<p>Sends the request to the server</p>"},{"location":"documentation/autogen/Request.html#void-approveclients-table","title":"void Approve<code>(clients: table)</code>","text":"<p>The request is approved and its replicated to the specified clients, if none is specified it will be replicated to all the clients except to the client who sent the request</p>"},{"location":"documentation/autogen/Request.html#baseobject-acceptany","title":"BaseObject Accept<code>(...any)</code>","text":"<p>Accepts the request and builds the object to be replicated</p>"},{"location":"documentation/autogen/Request.html#void-getclient","title":"void GetClient<code>()</code>","text":"<p>Returns the player which sent the request</p>"},{"location":"documentation/autogen/Request.html#events","title":"Events","text":"Name Description Build Params -&gt; BaseObjectFired when a request is accepted and the object to be replicated is being built"},{"location":"documentation/autogen/Scene.html","title":"Scene","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>This class is useful to have a workspace and manage your project more easily</p>"},{"location":"documentation/autogen/Scene.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Scene.html#readonly-table-objects","title":"readonly table Objects","text":"<p>This table stores all the objects in the scene</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/Scene.html#readonly-string-instancetype","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/Scene.html#readonly-soundenvironment-soundenvironment","title":"readonly SoundEnvironment SoundEnvironment","text":"<p>This is the SoundEnvironment of the scene</p>"},{"location":"documentation/autogen/Scene.html#readonly-particleenvironment-particleenvironment","title":"readonly ParticleEnvironment ParticleEnvironment","text":"<p>This is the ParticleEnvironment of the scene</p>"},{"location":"documentation/autogen/Scene.html#readonly-lightingenvironment-lightingenvironment","title":"readonly LightingEnvironment LightingEnvironment","text":"<p>This is the LightingEnvironment of the scene</p>"},{"location":"documentation/autogen/Scene.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Scene.html#scene-constructorparent-instance","title":"Scene Constructor<code>(parent: Instance)</code>","text":""},{"location":"documentation/autogen/Scene.html#void-addobjectobject-baseobject","title":"void AddObject<code>(object: BaseObject)</code>","text":"<p>Adds the specified object</p>"},{"location":"documentation/autogen/Scene.html#void-removeobjectobject-baseobject","title":"void RemoveObject<code>(object: BaseObject)</code>","text":"<p>Removes the specified object</p>"},{"location":"documentation/autogen/Scene.html#baseobject-findbynamename-string","title":"BaseObject? FindByName<code>(name: string)</code>","text":"<p>Finds an object by his name</p>"},{"location":"documentation/autogen/Scene.html#boolean-hasobjectobject-baseobject","title":"boolean HasObject<code>(object: BaseObject)</code>","text":"<p>Checks if the object is in the scene</p>"},{"location":"documentation/autogen/Scene.html#array-gettaggedobjectstag-string","title":"Array GetTaggedObjects<code>(tag: string)</code> <p>Gets all the objects with the provided tags in the scene</p>","text":""},{"location":"documentation/autogen/Scene.html#raycast2dresult-raycastinfo-raycast2dparams","title":"Raycast2dResult Raycast<code>(info: Raycast2dParams)</code> <p>Casts a ray using the Raycast2dParams. If it finds an elegible object a Raycast2dResult is returned containing the results of the operations</p>","text":""},{"location":"documentation/autogen/Scene.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/SceneManager.html","title":"SceneManager","text":"<p>Info</p> <p>This object was Extended from EventEmitter</p> <p>This class save and build the engine data</p>"},{"location":"documentation/autogen/SceneManager.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/SceneManager.html#readonly-table-scenes","title":"readonly table Scenes","text":"Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/SceneManager.html#readonly-table-activescenes","title":"readonly table ActiveScenes","text":"<p>This dictionary stores all the active scenes</p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/SceneManager.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/SceneManager.html#void-loadscene-scene","title":"void Load<code>(scene: Scene)</code>","text":"<p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>"},{"location":"documentation/autogen/SceneManager.html#void-unloadscene-scene","title":"void Unload<code>(scene: Scene)</code>","text":"<p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>"},{"location":"documentation/autogen/SceneManager.html#scene-findbynamename-string","title":"Scene? FindByName<code>(name: string)</code>","text":"<p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>"},{"location":"documentation/autogen/SceneManager.html#scene-getid-string","title":"Scene Get<code>(Id: string)</code>","text":"<p>Loads the engine data stored in the \"UpsideEngineDB\" attribute of replicated storage, when it ends sets the attribute as an empty table</p>"},{"location":"documentation/autogen/SceneManager.html#events","title":"Events","text":"Name Description SceneLoaded Params -&gt; Scene Fired when a scene is loaded SceneUnloaded Params -&gt; Scene Fired when a scene is unloaded"},{"location":"documentation/autogen/Sound.html","title":"Sound","text":"<p>Info</p> <p>This object was Extended from BaseObject</p> <p>This class is used to play sounds</p>"},{"location":"documentation/autogen/Sound.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Sound.html#readonly-string-instancetype","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/Sound.html#readonly-character-subject","title":"readonly Character Subject","text":"<p>This table stores all the objects in the scene</p>"},{"location":"documentation/autogen/Sound.html#rules-number-range","title":"rules number Range","text":"<p>This is the SoundEnvironment of the scene</p>"},{"location":"documentation/autogen/Sound.html#rules-number-maxvolume","title":"rules number MaxVolume","text":"<p>This is the ParticleEnvironment of the scene</p>"},{"location":"documentation/autogen/Sound.html#rules-boolean-distancefading","title":"rules boolean DistanceFading","text":"<p>The volume will depend on the player distance</p>"},{"location":"documentation/autogen/Sound.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Sound.html#void-setsubjectsubject-character-usescenesoundgroup-boolean","title":"void SetSubject<code>(subject: Character, useSceneSoundGroup: boolean?)</code>","text":"<p>Sets the provided character as subject, if is provided a sound group, this will be the new sound group of the sound</p>"},{"location":"documentation/autogen/Sound.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/SoundEnvironment.html","title":"SoundEnvironment","text":"<p>Info</p> <p>This object was Extended from Environment</p>"},{"location":"documentation/autogen/SoundEnvironment.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/SoundEnvironment.html#readonly-string-instancetype","title":"readonly string InstanceType","text":""},{"location":"documentation/autogen/SoundEnvironment.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/SoundEnvironment.html#events","title":"Events","text":"Name Description"},{"location":"documentation/autogen/Sprite.html","title":"Sprite","text":"<p>Info</p> <p>This object was Extended from PhysicalObject</p> <p>This class is used to play sounds</p>"},{"location":"documentation/autogen/Sprite.html#properties","title":"Properties","text":""},{"location":"documentation/autogen/Sprite.html#readonly-boolean-isplaying","title":"readonly boolean IsPlaying","text":"<p>Indicates if the sprite is playing</p>"},{"location":"documentation/autogen/Sprite.html#readonly-table-active","title":"readonly table Active","text":"<p>This table stores information about the active spritesheet</p> Content <pre><code>{\n    Name: string,\n    CurrentFrame: Vector2,\n    SecondsPerFrame: number,\n    NextStepReady: boolean,\n} \n</code></pre>"},{"location":"documentation/autogen/Sprite.html#rules-number-secondsperframe","title":"rules number SecondsPerFrame","text":"<p>This is the time to wait between frame and frame</p>"},{"location":"documentation/autogen/Sprite.html#rules-table-sprites","title":"rules table Sprites","text":"<p>This table stores all sprite sheets and sprite lists </p> Content <pre><code>{   } \n</code></pre>"},{"location":"documentation/autogen/Sprite.html#methods","title":"Methods","text":""},{"location":"documentation/autogen/Sprite.html#sprite-constructorparent-scene-size-vector2","title":"Sprite Constructor<code>(parent: Scene, size: Vector2)</code>","text":"<p>The second parameter is the size of a cell of every frame of an sprite sheet, this can be changed using the .ImageRectSize property of the object Instance </p>"},{"location":"documentation/autogen/Sprite.html#void-setspritesheetname-string-url-string-frames-vector2","title":"void SetSpriteSheet<code>(name: string, url: string, frames: Vector2)</code>","text":"<p>Adds a new sprite sheet to the object, the sprite will be played using as reference the amount of cells in the X axe and the Y axe, this must be provided in the third paramether as a Vector2</p>"},{"location":"documentation/autogen/Sprite.html#void-setspritelistname-string-list-arraystring","title":"void SetSpriteList<code>(name: string, list: Array&lt;string&gt;)</code>","text":"<p>Adds a new sprite list to the object, it will play the animation using the order in the provided list, this list must contain the urls of every frame</p>"},{"location":"documentation/autogen/Sprite.html#void-playname-string-secondsperframe-number","title":"void Play<code>(name: string, secondsPerFrame: number?)</code>","text":"<p>Plays the specified sprite if exists, if secondsEveryFrame is specified it will be used instead of .SecondsPerFrame</p>"},{"location":"documentation/autogen/Sprite.html#void-stop","title":"void Stop<code>()</code>","text":"<p>Stops the reproduction of the current playing sprite sheet or sprite list</p>"},{"location":"documentation/autogen/Sprite.html#events","title":"Events","text":"Name Description"},{"location":"documentation/datatypes/ClassData.html","title":"UpsideEngineInput","text":"<p>A ClassData represents the data needed to extend a class </p> <p></p>"},{"location":"documentation/datatypes/ClassData.html#properties","title":"Properties","text":"<pre><code>{\n    name -&gt; string,\n    constructor -&gt; Dictionary&lt;string, () -&gt; ()&gt;,\n    methods -&gt; Dictionary&lt;string, () -&gt; ()&gt;,\n    private -&gt; Dictionary&lt;string, any&gt;,\n    readonly -&gt; Dictionary&lt;string, any&gt;,\n    rules -&gt; Dictionary&lt;string, any&gt;,\n}\n</code></pre>"},{"location":"documentation/datatypes/Raycast2DParams.html","title":"Raycast2DParams","text":"<p>The parameters for a raycast operation</p> <p></p>"},{"location":"documentation/datatypes/Raycast2DParams.html#properties","title":"Properties","text":"<pre><code>{\n    FilterType = \"Whitelist\", -- Whitelist/Blacklist\n    From = Vector2.new(),\n    To = Vector2.new(),\n    List = { ... } -- Dictionary&lt;objectID, object&gt;\n}\n</code></pre>"},{"location":"documentation/datatypes/Raycast2DResult.html","title":"Raycast2DResult","text":"<p>The result of a raycast operation</p> <p></p>"},{"location":"documentation/datatypes/Raycast2DResult.html#properties","title":"Properties","text":"<pre><code>{\n    Object -&gt; PhysicalObject\n    Position -&gt; UDim2\n    Distance -&gt; number\n    Normal -&gt; UDim2\n}\n</code></pre>"},{"location":"documentation/datatypes/UpsideEngineInput.html","title":"UpsideEngineInput","text":"<p>An UpsideEngineInput represents a single user input, such as joystick movement, key presses, mobile actions and more </p> <p></p>"},{"location":"documentation/datatypes/UpsideEngineInput.html#properties","title":"Properties","text":"<pre><code>{\n    Action -&gt; string,\n    Position -&gt; Vector2,\n    KeyCode -&gt; KeyCode,\n}\n</code></pre>"},{"location":"tutorials/Welcome.html","title":"Welcome to the tutorials!","text":""},{"location":"tutorials/get-started/FirstGame.html","title":"Your first game","text":"<p>In this guide, we'll walk you through the process of creating a basic game scenario using Upside Engine, a framework for Roblox 2d game development.</p> <p>Tip</p> <p>In this guide we are going to use Offset, scale should never be used for a 2D game, as it is problematic on some devices, it is recommended that when building your game you use 1920x1080 resolution in the device emulator as it will adapt to most devices.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-1-setting-up-the-scene","title":"Step 1: Setting up the scene","text":"<p>The first thing we need to do is to create a scenario for our game. To do this, we'll use the <code>Scene</code> object, which is a useful tool for creating scenarios quickly and easily.</p> <p>In your <code>init.client.luau</code> script, add the following code:</p> <p><pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal tweenService = game:GetService(\"TweenService\")\nlocal players = game:GetService(\"Players\")\n\nlocal packages = replicatedStorage.packages\nlocal playerGui = players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\nlocal upsideEngine = require(packages.UpsideEngine)\nlocal sceneManager = upsideEngine:GetService(\"SceneManager\")\nlocal scene = upsideEngine:Create(\"Scene\", playerGui) -- We create the scene and pass PlayerGui as the parent object\nscene:SetName(\"MyFirstScene\") -- We set the scene name\nsceneManager:Load(scene)\n</code></pre> This code creates a new Scene object and adds it to the PlayerGui object in your game.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-2-creating-the-floor","title":"Step 2: Creating the floor","text":"<p>Now that we have our scene set up, we can create a floor for our game. To do this, we'll use the PhysicalObject object.</p> <p><pre><code>local leftFloor = upsideEngine:Create(\"PhysicalObject\", scene) -- We create the floor and pass the scene as the parent object\nleftFloor:Set({\n    Image = \"rbxassetid://12980969571\", -- We set the floor texture\n    Size = UDim2.fromOffset(600, 160),\n    Position = UDim2.fromOffset(300, 1000),\n})\n\nlocal rightFloor = upsideEngine:Create(\"PhysicalObject\", scene) -- We create the floor and pass the scene as the parent object\nrightFloor:Set({\n    Image = \"rbxassetid://12980969571\", -- We set the floor texture\n    Size = UDim2.fromOffset(600, 160), \n    Position = UDim2.fromOffset(1620, 1000),\n})\n</code></pre> This code creates a new PhysicalObject object and adds it to our scene. We then set the floor's texture and size.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-3-creating-a-background","title":"Step 3: Creating a background","text":"<p>Next, let's add a background to our game. This time we'll use another PhysicalObject object, but we'll set it up a little differently.</p> <p><pre><code>local background = Instance.new(\"Frame\")\nbackground.BackgroundTransparency = 0 -- We set the background transparency\nbackground.BackgroundColor3 = Color3.fromRGB(27, 62, 82)\nbackground.Size = UDim2.fromScale(1, 1) -- We set the size to the target screen size\nbackground.Position = UDim2.fromOffset(0.5, 0.5) -- We set the position to the center\nbackground.ZIndex = -1\nbackground.Parent = scene.Instance.Parent\n</code></pre> This code creates a new PhysicalObject object and adds it to our scene. We then set the background's texture and size to the full screen size.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-4-adding-decoration","title":"Step 4: Adding decoration","text":"<p>Next, let's add a the decoration to our game. This time we'll use another PhysicalObject object, but we'll set it up a little differently.</p> <p><pre><code>local decoration = upsideEngine:Create(\"PhysicalObject\", scene) -- We create the decoration and pass the scene as the parent object\ndecoration.TrackCollisions = false\ndecoration:Set({\n    Image = \"rbxassetid://12993235175\", -- We set the decoration texture\n    Size = UDim2.fromOffset(1920, 1080), -- We set the size to the target screen size\n    Position = UDim2.fromOffset(960, 540), -- We set the position to the center\n    ZIndex = 0,\n})\n</code></pre> This code creates a new PhysicalObject object and adds it to our scene. We then set the background's texture and size to the full screen size.</p>"},{"location":"tutorials/get-started/FirstGame.html#step-5-creating-platforms","title":"Step 5: Creating platforms","text":"<p>Finally, let's create some interactive platforms for our game, we will create a platform that falls once it detects a collision.</p> <pre><code>-- Create platform object and set properties\nlocal function createPlatform(x, y)\n    local position = UDim2.fromOffset(x, y)\n    local platform = upsideEngine:Create(\"PhysicalObject\", scene)\n    platform.Mass = 0\n    platform.Anchored = false\n    platform:Set({\n        Image = \"rbxassetid://12979703349\",\n        Size = UDim2.fromOffset(250, 80),\n        Position = position,\n        ZIndex = 2,\n    })\n\n    -- Create Tween to animate platform to its original position on collision\n    local info = TweenInfo.new(1)\n    local goal = { Position = position }\n\n    local toOrigin = tweenService:Create(platform.Instance, info, goal)\n    local falling = false\n    toOrigin.Completed:Connect(function()\n        falling = false\n    end)\n\n    -- Listen to the \"Collision\" event\n    platform:On(\"Collision\", function(object) -- Create a function to detect when the plaform collides\n        if not object:IsA(\"Character\") or falling then\n            return\n        end\n\n        task.wait(1)\n        falling = true\n        platform.Mass = 200\n\n        task.wait(5)\n        platform.Mass = 0\n        platform.Force = Vector2.zero\n\n        toOrigin:Play()\n    end)\nend\n\ncreatePlatform(800, 900)\ncreatePlatform(1120, 900)\n\nfor _, scr in script:GetChildren() do\n    require(scr) --Initializate the secondary scripts\nend\n</code></pre>"},{"location":"tutorials/get-started/FirstGame.html#congratulations-youve-now-created-your-first-scenario-using-upside-engine","title":"Congratulations! You've now created your first scenario using Upside Engine \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/get-started/GraphicInterface.html","title":"Upside Engine Plugin","text":"<p>You can use the upside engine framework for free, but to support the project we\u2019ve created a graphic interface which makes easier to use the engine and speed up the process of creating a game. You can buy this plugin for 350 robux.</p> <p>Get the Plugin</p> <p>Warning</p> <p>By playing this video, you agree youtube cookies</p>"},{"location":"tutorials/get-started/Installation.html","title":"Installation","text":"<p>Warning</p> <p>Please be aware that this guide requires the use of Github submodules and Rojo. Before proceeding, make sure that you have initialized a Git repository and are using the Rojo template.</p> <p>To install the Upside Engine Framework, use the following command to create a new folder named \"packages\" with the Upside Engine Framework inside:</p> <pre><code>git submodule add https://github.com/TheHackerPuppy/UpsideEngine packages/UpsideEngine\n</code></pre> Download-for-roblox-studio <p>Warning</p> <p>This tutorial is oriented to an external editor so might you have some problems following the tutorial if you use roblox studio to code</p> <p>If you don't use an external editor and you just prefer to program directly on roblox follow please these steps:</p> <ul> <li>Create a folder in ReplicatedStorage and then name it as \"packages\"</li> <li>Place the upside engine module in the packages folder</li> </ul> <p>Download the upside engine module script clicking on the button below </p> <p>Download</p>"},{"location":"tutorials/get-started/Installation.html#recommended-rojo-template","title":"Recommended Rojo Template","text":"<p>To install the Upside Engine Framework, use the following command to create a new folder named \"packages\" with the Upside Engine Framework inside:</p> Info <pre><code>{\n\"name\": \"My first 2D Game\",\n\"tree\": {\n\"$className\": \"DataModel\",\n\"ReplicatedStorage\": {\n\"$className\": \"ReplicatedStorage\",\n\"packages\": {\n\"$className\": \"Folder\",\n\"$path\": \"packages\"\n}\n},\n\n\"StarterPlayer\": {\n\"$className\": \"StarterPlayer\",\n\"StarterPlayerScripts\": {\n\"$className\": \"StarterPlayerScripts\",\n\"client\":{\n\"$path\": \"src/client\"\n}\n}\n},\n\n\"ServerScriptService\": {\n\"$className\": \"ServerScriptService\",\n\"server\": {\n\"$path\":\"src/server\"\n}\n}\n}\n}\n</code></pre>"},{"location":"tutorials/get-started/Installation.html#recommended-lsp","title":"Recommended LSP","text":"<p>For the best experience, we recommend to use the LuauLSP extension for Visual Studio Code.</p> Typescript-types <p>You can also use typescript, just be sure you have installed roblox-ts</p> <p>Once you have installed LuauLSP then go to extension settings and search \u201cDefinition Files\u201d</p> <p></p> <p>Click on \"Add Item\" and then enter this path <code>packages/UpsideEngine/upside-engine.d.luau</code>. Then click again on \"Add Item\" and then enter this path too <code>packages/UpsideEngine/src/init.d.luau</code>.</p>"},{"location":"tutorials/get-started/Installation.html#an-important-step","title":"An important step","text":"<p>To ensure that the Upside Engine functions correctly, it is important to initialize the engine on the server, even if you are not using any server-side functionality. This is because some services, such as <code>NetworkingService</code>, depend on the server side.</p> <p>Here is an example of how to initialize the engine:</p> <pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal packages = replicatedStorage.packages\n\nlocal upsideEngine = require(packages.UpsideEngine)\nprint(\"Upside Engine version: \" .. upsideEngine.Version)\n</code></pre>"},{"location":"tutorials/get-started/Installation.html#congratulations-you-finished-the-installation-of-the-upside-engine-framework","title":"Congratulations you finished the installation of the upside engine framework \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/get-started/LicensePage.html","title":"License","text":"<p>The Upside Engine Framework has an Apache 2.0 License, so you can use this engine for anything you want, it will always be mandatory to give credits except if it is for a videogame <code>(but it would be very appreciated)</code>, for any other kind of projects it will be mandatory to give credits, you can read more about this license here .</p> <p>If you still have any doubt on how can you use the upside engine framework in your projects ask us in our discord .</p>"},{"location":"tutorials/get-started/Music.html","title":"Music","text":"<p>We'll create a new file called <code>radio.luau</code> in the <code>src/client</code> folder. We are going to add inmersive background music, for this we are going to create a Sprite that represents a radio that is going to have a song gets louder when you get closer to it </p> <pre><code>-- Get necessary services\nlocal replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal packages = replicatedStorage.packages\n\n-- Require the upside engine module\nlocal upsideEngine = require(packages.UpsideEngine)\nlocal sceneManager = upsideEngine:GetService(\"SceneManager\")\nlocal scene = sceneManager:FindByName(\"MyFirstScene\")\n\n-- Create the radio\nlocal radio = upsideEngine:Create(\"Sprite\", scene, Vector2.new(37, 64)) -- we pass 37x64 as resolution\nradio:SetSpriteSheet(\"default\", \"rbxassetid://12908065852\", Vector2.new(1, 14)) -- We pass 1, 14 to say we have 1 row and 14 columns\nradio:Play(\"default\")\nradio:Set({\n    Size = UDim2.fromOffset(128, 128),\n    Position = UDim2.fromOffset(1540, 490),\n    ZIndex = 3,\n})\n\n-- Create a new sound\nlocal music = upsideEngine:Create(\"Sound\", scene)\nmusic.DistanceFading = true\nmusic.Instance:Play()\nmusic:SetSubject(radio)\nmusic:Set({\n    SoundId = \"rbxassetid://1844102827\",\n})\n</code></pre> <p>Bug</p> <p>Remember that you are using a module script, don't forget to return a value at the end of the script! <pre><code>return {}\n</code></pre></p> <p>You can view and edit the finished project here.</p>"},{"location":"tutorials/get-started/Music.html#great-job-you-have-successfully-learned-the-fundamentals-of-the-upside-engine-framework-the-following-pages-are-dedicated-to-interesting-information-that-you-may-want-to-know","title":"Great job! You have successfully learned the fundamentals of the Upside Engine framework \ud83c\udf89\ud83c\udf89 The following pages are dedicated to interesting information that you may want to know","text":""},{"location":"tutorials/get-started/PlayerCharacter.html","title":"Creating the Player Character","text":"<p>To create the player character, we will need to create a new Luau file named <code>character.luau</code> in the <code>src/client</code> folder and add the following code:</p> <p><pre><code>local replicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal runService = game:GetService(\"RunService\")\nlocal packages = replicatedStorage.packages\n\nlocal upsideEngine = require(packages.UpsideEngine)\nlocal sceneManager = upsideEngine:GetService(\"SceneManager\")\nlocal crossPlatformService = upsideEngine:GetService(\"CrossPlatformService\")\n\nlocal scene = sceneManager:FindByName(\"MyFirstScene\")\nlocal spawn_position = UDim2.fromOffset(350, 800)\nlocal player = upsideEngine:Create(\"Character\", scene, Vector2.new(37, 64))\nplayer.Anchored = false\nplayer:SetSpriteSheet(\"idle\", \"rbxassetid://12908048527\", Vector2.new(12, 1))\nplayer:SetSpriteSheet(\"right\", \"rbxassetid://12908048527\", Vector2.new(12, 1))\nplayer:SetSpriteSheet(\"jump\", \"rbxassetid://12908048527\", Vector2.new(12, 1))\nplayer:SetSpriteSheet(\"left\", \"rbxassetid://12970115106\", Vector2.new(12, 1))\nplayer:Set({\n    Position = spawn_position,\n    Size = UDim2.fromOffset(128, 128),\n    ZIndex = 4,\n})\n</code></pre> This code creates a new character object in the game's scene using the Upside Engine framework. The character object is stored in a variable named \"player\".</p>"},{"location":"tutorials/get-started/PlayerCharacter.html#adding-animations","title":"Adding Animations","text":"<p>Tip</p> <p>Some words like \"idle\", \"left\" or \"jump\" can be played automatically by CrossPlatformService, which means that it is not necessary to play them if <code>CrossPlatformService.DefaultControllersEnabled</code> is set to true.</p> <p>We can add animations to our player character using sprite sheets. <pre><code>player:SetSpriteSheet(\"idle\", \"rbxassetid://12908048527\", Vector2.new(1, 12))\n</code></pre></p> <p>This sets the sprite sheet for the \"idle\" animation, using the ID of the asset and also pass the number of rows and columns as a Vector2, for example we have 5 frames in the in two lines, the expected Vector2 would be <code>Vector2.new(2, 5)</code>.</p>"},{"location":"tutorials/get-started/PlayerCharacter.html#adding-player-controllers","title":"Adding Player Controllers","text":"<p>To add player controllers, we need to use the CrossPlatformService which was required in the previously:</p> <p><pre><code>crossPlatformService:SetPlayerCharacter(player)\n</code></pre> This sets the player character as the subject of the CrossPlatformService, allowing for control inputs to be applied to the character</p>"},{"location":"tutorials/get-started/PlayerCharacter.html#camera-setup","title":"Camera Setup","text":"<p>To make the camera follow the character, we will need to define the player as the camera subject. We can achieve this by using the following code:</p> <pre><code>scene.Camera:SetSubject(player)\n</code></pre> <p>Bug</p> <p>Remember that you are using a module script, don't forget to return a value at the end of the script! <pre><code>return {}\n</code></pre></p>"},{"location":"tutorials/get-started/PlayerCharacter.html#congratulations-youve-now-created-your-first-player-character-using-upside-engine","title":"Congratulations! You've now created your first player character using Upside Engine \ud83c\udf89\ud83c\udf89","text":""},{"location":"tutorials/others/Introduction.html","title":"Installation","text":""}]}